/*
 * Copyright (c) 2022 Vladimir Alemasov
 * All rights reserved
 * 
 * This program and the accompanying materials are distributed under 
 * the terms of GNU General Public License version 2 
 * as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * @file     ASR6601.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     30. May 2022
 * @note     Generated by SVDConv V3.3.42 on Monday, 30.05.2022 17:59:22
 *           from File 'ASR6601.svd',
 *           last modified by hand 12.07.2022
 */



/** @addtogroup ASR Microelectronics
  * @{
  */


/** @addtogroup ASR6601
  * @{
  */


#ifndef ASR6601_H
#define ASR6601_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  ASR6601 Specific Interrupt Numbers  =========================================== */
  SEC_IRQn                  =   0,              /*!< SEC Interrupt                                                             */
  RTC_IRQn                  =   1,              /*!< RTC Interrupt                                                             */
  WDG_IRQn                  =   2,              /*!< WDG Interrupt                                                             */
  EFC_IRQn                  =   3,              /*!< EFC Interrupt                                                             */
  UART3_IRQn                =   4,              /*!< UART3 Interrupt                                                           */
  I2C2_IRQn                 =   5,              /*!< I2C2 Interrupt                                                            */
  UART0_IRQn                =   6,              /*!< UART0 Interrupt                                                           */
  UART1_IRQn                =   7,              /*!< UART1 Interrupt                                                           */
  UART2_IRQn                =   8,              /*!< UART2 Interrupt                                                           */
  LPUART_IRQn               =   9,              /*!< LPUART Interrupt                                                          */
  SSP0_IRQn                 =  10,              /*!< SSP0 Interrupt                                                            */
  SSP1_IRQn                 =  11,              /*!< SSP1 Interrupt                                                            */
  QSPI_IRQn                 =  12,              /*!< QSPI Interrupt                                                            */
  I2C0_IRQn                 =  13,              /*!< I2C0 Interrupt                                                            */
  I2C1_IRQn                 =  14,              /*!< I2C1 Interrupt                                                            */
  SCC_IRQn                  =  15,              /*!< SCC Interrupt                                                             */
  ADC_IRQn                  =  16,              /*!< ADC Interrupt                                                             */
  AFEC_IRQn                 =  17,              /*!< AFEC Interrupt                                                            */
  SSP2_IRQn                 =  18,              /*!< SSP2 Interrupt                                                            */
  DMA1_IRQn                 =  19,              /*!< DMA1 Interrupt                                                            */
  DAC_IRQn                  =  20,              /*!< DAC Interrupt                                                             */
  LORA_IRQn                 =  21,              /*!< LORA Interrupt                                                            */
  GPIO_IRQn                 =  22,              /*!< GPIO Interrupt                                                            */
  TIMER0_IRQn               =  23,              /*!< TIMER0 Interrupt                                                          */
  TIMER1_IRQn               =  24,              /*!< TIMER1 Interrupt                                                          */
  TIMER2_IRQn               =  25,              /*!< TIMER2 Interrupt                                                          */
  TIMER3_IRQn               =  26,              /*!< TIMER3 Interrupt                                                          */
  BSTIMER0_IRQn             =  27,              /*!< BSTIMER0 Interrupt                                                        */
  BSTIMER1_IRQn             =  28,              /*!< BSTIMER1 Interrupt                                                        */
  LPTIMER0_IRQn             =  29,              /*!< LPTIMER0 Interrupt                                                        */
  SAC_IRQn                  =  30,              /*!< SAC Interrupt                                                             */
  DMA0_IRQn                 =  31,              /*!< DMA0 Interrupt                                                            */
  I2S_IRQn                  =  32,              /*!< I2S Interrupt                                                             */
  LCD_IRQn                  =  33,              /*!< LCD Interrupt                                                             */
  PWR_IRQn                  =  34,              /*!< PWR Interrupt                                                             */
  LPTIMER1_IRQn             =  35,              /*!< LPTIMER1 Interrupt                                                        */
  IWDG_IRQn                 =  36               /*!< IWDG Interrupt                                                            */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0001U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU is not provided                                                       */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */
#include "system_ASR6601.h"                     /*!< ASR6601 System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40000000) RCC Structure                                              */
  
  union {
    __IOM uint32_t CR0;                         /*!< (@ 0x00000000) Clock control register 0                                   */
    
    struct {
            uint32_t            : 5;
      __IOM uint32_t PCLK0_DIV  : 3;            /*!< [7..5] PCLK0 clock source prescaler                                       */
      __IOM uint32_t HCLK_DIV   : 4;            /*!< [11..8] HCLK clock source prescaler                                       */
      __IOM uint32_t SYSCLK_SEL : 3;            /*!< [14..12] SYSCLK clock source selection                                    */
      __IOM uint32_t PCLK1_DIV  : 3;            /*!< [17..15] PCLK1 clock source prescaler                                     */
      __IOM uint32_t MCO_CLK_OUT : 1;           /*!< [18..18] MCO clock output                                                 */
      __IOM uint32_t MCO_CLK_SEL : 3;           /*!< [21..19] MCO clock source selection                                       */
      __IOM uint32_t MCO_CLK_DIV : 3;           /*!< [24..22] MCO clock source prescaler                                       */
      __IOM uint32_t STCLKEN_SEL : 1;           /*!< [25..25] SYSTICK clock source selection                                   */
            uint32_t            : 6;
    } CR0_b;
  } ;
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000004) Clock control register 1                                   */
    
    struct {
      __IOM uint32_t IWDG_CLK_SEL : 1;          /*!< [0..0] IWDG clock source selection                                        */
      __IOM uint32_t RTC_CLK_SEL : 1;           /*!< [1..1] RTC clock source selection                                         */
      __IOM uint32_t LPUART_CLK_SEL : 2;        /*!< [3..2] LPUART clock source selection                                      */
      __IOM uint32_t LCD_CLK_SEL : 2;           /*!< [5..4] LCD clock source selection                                         */
      __IOM uint32_t LPTIMER0_CLK_SEL : 2;      /*!< [7..6] LPTIMER0 clock source selection                                    */
      __IOM uint32_t LPTIMER1_CLK_SEL : 2;      /*!< [9..8] LPTIMER1 clock source selection                                    */
      __IOM uint32_t LPTIMER0_EXTCLK_SEL : 1;   /*!< [10..10] LPTIMER0 external clock source enable                            */
      __IOM uint32_t LPTIMER1_EXTCLK_SEL : 1;   /*!< [11..11] LPTIMER1 external clock source enable                            */
            uint32_t            : 20;
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000008) Clock control register 2                                   */
    
    struct {
      __IOM uint32_t QSPI_CLK_SEL : 2;          /*!< [1..0] QSPI clock source selection                                        */
      __IOM uint32_t I2S_CLK_SEL : 3;           /*!< [4..2] I2S clock source selection                                         */
      __IOM uint32_t ADC_CLK_SEL : 2;           /*!< [6..5] ADC clock source selection                                         */
      __IOM uint32_t SCC_CLK_SEL : 2;           /*!< [8..7] SCC clock source selection                                         */
      __IOM uint32_t UART3_CLK_SEL : 2;         /*!< [10..9] UART3 clock source selection                                      */
      __IOM uint32_t UART2_CLK_SEL : 2;         /*!< [12..11] UART2 clock source selection                                     */
      __IOM uint32_t UART1_CLK_SEL : 2;         /*!< [14..13] UART1 clock source selection                                     */
      __IOM uint32_t UART0_CLK_SEL : 2;         /*!< [16..15] UART0 clock source selection                                     */
            uint32_t            : 15;
    } CR2_b;
  } ;
  
  union {
    __IOM uint32_t CGR0;                        /*!< (@ 0x0000000C) Clock generation register 0                                */
    
    struct {
      __IOM uint32_t TIMER3_CLK : 1;            /*!< [0..0] TIMER3 clock                                                       */
      __IOM uint32_t TIMER2_CLK : 1;            /*!< [1..1] TIMER2 clock                                                       */
      __IOM uint32_t TIMER1_CLK : 1;            /*!< [2..2] TIMER1 clock                                                       */
      __IOM uint32_t TIMER0_CLK : 1;            /*!< [3..3] TIMER0 clock                                                       */
      __IOM uint32_t LORA_CLK   : 1;            /*!< [4..4] LORA clock                                                         */
      __IOM uint32_t DAC_CLK    : 1;            /*!< [5..5] DAC clock                                                          */
      __IOM uint32_t LCD_CLK    : 1;            /*!< [6..6] LCD clock                                                          */
      __IOM uint32_t AFEC_CLK   : 1;            /*!< [7..7] AFEC clock                                                         */
      __IOM uint32_t ADC_CLK    : 1;            /*!< [8..8] ADC clock                                                          */
      __IOM uint32_t SCC_CLK    : 1;            /*!< [9..9] SCC clock                                                          */
      __IOM uint32_t I2C2_CLK   : 1;            /*!< [10..10] I2C2 clock                                                       */
      __IOM uint32_t I2C1_CLK   : 1;            /*!< [11..11] I2C1 clock                                                       */
      __IOM uint32_t I2C0_CLK   : 1;            /*!< [12..12] I2C0 clock                                                       */
      __IOM uint32_t SSP2_CLK   : 1;            /*!< [13..13] SSP2 clock                                                       */
      __IOM uint32_t SSP1_CLK   : 1;            /*!< [14..14] SSP1 clock                                                       */
      __IOM uint32_t SSP0_CLK   : 1;            /*!< [15..15] SSP0 clock                                                       */
      __IOM uint32_t LPUART_CLK : 1;            /*!< [16..16] LPUART clock                                                     */
      __IOM uint32_t UART3_CLK  : 1;            /*!< [17..17] UART3 clock                                                      */
      __IOM uint32_t UART2_CLK  : 1;            /*!< [18..18] UART2 clock                                                      */
      __IOM uint32_t UART1_CLK  : 1;            /*!< [19..19] UART1 clock                                                      */
      __IOM uint32_t UART0_CLK  : 1;            /*!< [20..20] UART0 clock                                                      */
      __IOM uint32_t SYSCFG_CLK : 1;            /*!< [21..21] SYSCFG clock                                                     */
      __IOM uint32_t IOM3_CLK   : 1;            /*!< [22..22] IOM3 clock                                                       */
      __IOM uint32_t IOM2_CLK   : 1;            /*!< [23..23] IOM2 clock                                                       */
      __IOM uint32_t IOM1_CLK   : 1;            /*!< [24..24] IOM1 clock                                                       */
      __IOM uint32_t IOM0_CLK   : 1;            /*!< [25..25] IOM0 clock                                                       */
      __IOM uint32_t BSTIMER1_CLK : 1;          /*!< [26..26] BSTIMER1 clock                                                   */
      __IOM uint32_t BSTIMER0_CLK : 1;          /*!< [27..27] BSTIMER0 clock                                                   */
      __IOM uint32_t CRC_CLK    : 1;            /*!< [28..28] CRC clock                                                        */
      __IOM uint32_t DMAC1_CLK  : 1;            /*!< [29..29] DMAC1 clock                                                      */
      __IOM uint32_t DMAC0_CLK  : 1;            /*!< [30..30] DMAC0 clock                                                      */
      __IOM uint32_t PWR_CLK    : 1;            /*!< [31..31] PWR clock                                                        */
    } CGR0_b;
  } ;
  
  union {
    __IOM uint32_t CGR1;                        /*!< (@ 0x00000010) Clock generation register 1                                */
    
    struct {
      __IOM uint32_t SEC_CLK    : 1;            /*!< [0..0] SEC clock                                                          */
      __IOM uint32_t RTC_CLK    : 1;            /*!< [1..1] RTC clock                                                          */
      __IOM uint32_t WDG_CLK    : 1;            /*!< [2..2] WDG clock                                                          */
      __IOM uint32_t IWDG_CLK   : 1;            /*!< [3..3] IWDG clock                                                         */
      __IOM uint32_t LPTIMER0_CLK : 1;          /*!< [4..4] LPTIMER0 clock                                                     */
      __IOM uint32_t QSPI_CLK   : 1;            /*!< [5..5] QSPI clock                                                         */
      __IOM uint32_t WDG_CNT_CLK : 1;           /*!< [6..6] WDG_CNT clock                                                      */
      __IOM uint32_t SAC_CLK    : 1;            /*!< [7..7] SAC clock                                                          */
      __IOM uint32_t I2S_CLK    : 1;            /*!< [8..8] I2S clock                                                          */
      __IOM uint32_t LPTIMER0_PCLK : 1;         /*!< [9..9] LPTIMER0 PCLK clock                                                */
      __IOM uint32_t RNGC_CLK   : 1;            /*!< [10..10] RNGC clock                                                       */
      __IOM uint32_t LPTIMER1_CLK : 1;          /*!< [11..11] LPTIMER1 clock                                                   */
      __IOM uint32_t LPTIMER1_PCLK : 1;         /*!< [12..12] LPTIMER1 PCLK clock                                              */
            uint32_t            : 19;
    } CGR1_b;
  } ;
  
  union {
    __IOM uint32_t CGR2;                        /*!< (@ 0x00000014) Clock generation register 2                                */
    
    struct {
      __IOM uint32_t IWDG_AON_CLK : 1;          /*!< [0..0] IWDG AON clock                                                     */
      __IOM uint32_t RTC_AON_CLK : 1;           /*!< [1..1] RTC AON clock                                                      */
      __IOM uint32_t LPUART_AON_CLK : 1;        /*!< [2..2] LPUART AON clock                                                   */
      __IOM uint32_t LCD_AON_CLK : 1;           /*!< [3..3] LCD AON clock                                                      */
      __IOM uint32_t LPTIMER0_AON_CLK : 1;      /*!< [4..4] LPTIMER0 AON clock                                                 */
      __IOM uint32_t LPTIMER1_AON_CLK : 1;      /*!< [5..5] LPTIMER1 AON clock                                                 */
            uint32_t            : 26;
    } CGR2_b;
  } ;
  
  union {
    __IOM uint32_t RST0;                        /*!< (@ 0x00000018) Reset register 0                                           */
    
    struct {
      __IOM uint32_t SAC_RST    : 1;            /*!< [0..0] SAC reset                                                          */
      __IOM uint32_t SEC_RST    : 1;            /*!< [1..1] SEC reset                                                          */
      __IOM uint32_t CRC_RST    : 1;            /*!< [2..2] CRC reset                                                          */
      __IOM uint32_t RTC_RST    : 1;            /*!< [3..3] RTC reset                                                          */
      __IOM uint32_t WDG_RST    : 1;            /*!< [4..4] WDG reset                                                          */
      __IOM uint32_t IWDG_RST   : 1;            /*!< [5..5] IWDG reset                                                         */
      __IOM uint32_t LPTIMER0_RST : 1;          /*!< [6..6] LPTIMER0 reset                                                     */
      __IOM uint32_t BSTIMER1_RST : 1;          /*!< [7..7] BSTIMER1 reset                                                     */
      __IOM uint32_t BSTIMER0_RST : 1;          /*!< [8..8] BSTIMER0 reset                                                     */
      __IOM uint32_t TIMER3_RST : 1;            /*!< [9..9] TIMER3 reset                                                       */
      __IOM uint32_t TIMER2_RST : 1;            /*!< [10..10] TIMER2 reset                                                     */
      __IOM uint32_t TIMER1_RST : 1;            /*!< [11..11] TIMER1 reset                                                     */
      __IOM uint32_t TIMER0_RST : 1;            /*!< [12..12] TIMER0 reset                                                     */
      __IOM uint32_t IOM_RST    : 1;            /*!< [13..13] IOM reset                                                        */
      __IOM uint32_t LORA_RST   : 1;            /*!< [14..14] LORA reset                                                       */
      __IOM uint32_t DAC_RST    : 1;            /*!< [15..15] DAC reset                                                        */
      __IOM uint32_t LCD_RST    : 1;            /*!< [16..16] LCD reset                                                        */
      __IOM uint32_t AFEC_RST   : 1;            /*!< [17..17] AFEC reset                                                       */
      __IOM uint32_t ADC_RST    : 1;            /*!< [18..18] ADC reset                                                        */
      __IOM uint32_t SCC_RST    : 1;            /*!< [19..19] SCC reset                                                        */
      __IOM uint32_t I2C2_RST   : 1;            /*!< [20..20] I2C2 reset                                                       */
      __IOM uint32_t I2C1_RST   : 1;            /*!< [21..21] I2C1 reset                                                       */
      __IOM uint32_t I2C0_RST   : 1;            /*!< [22..22] I2C0 reset                                                       */
      __IOM uint32_t QSPI_RST   : 1;            /*!< [23..23] QSPI reset                                                       */
      __IOM uint32_t SSP2_RST   : 1;            /*!< [24..24] SSP2 reset                                                       */
      __IOM uint32_t SSP1_RST   : 1;            /*!< [25..25] SSP1 reset                                                       */
      __IOM uint32_t SSP0_RST   : 1;            /*!< [26..26] SSP0 reset                                                       */
      __IOM uint32_t LPUART_RST : 1;            /*!< [27..27] LPUART reset                                                     */
      __IOM uint32_t UART3_RST  : 1;            /*!< [28..28] UART3 reset                                                      */
      __IOM uint32_t UART2_RST  : 1;            /*!< [29..29] UART2 reset                                                      */
      __IOM uint32_t UART1_RST  : 1;            /*!< [30..30] UART1 reset                                                      */
      __IOM uint32_t UART0_RST  : 1;            /*!< [31..31] UART0 reset                                                      */
    } RST0_b;
  } ;
  
  union {
    __IOM uint32_t RST1;                        /*!< (@ 0x0000001C) Reset register 1                                           */
    
    struct {
      __IOM uint32_t DMAC1_RST  : 1;            /*!< [0..0] DMAC1 reset                                                        */
      __IOM uint32_t DMAC0_RST  : 1;            /*!< [1..1] DMAC0 reset                                                        */
      __IOM uint32_t I2S_RST    : 1;            /*!< [2..2] I2S reset                                                          */
      __IOM uint32_t RNGC_RST   : 1;            /*!< [3..3] RNGC reset                                                         */
      __IOM uint32_t IWDG_RESET_REQ_EN : 1;     /*!< [4..4] LPTIMER1 reset                                                     */
            uint32_t            : 27;
    } RST1_b;
  } ;
  
  union {
    __IOM uint32_t RST_SR;                      /*!< (@ 0x00000020) Reset status register                                      */
    
    struct {
      __IOM uint32_t STANDBY_RESET : 1;         /*!< [0..0] Reset from STANDBY                                                 */
      __IOM uint32_t SEC_RESET  : 1;            /*!< [1..1] Reset from SEC                                                     */
      __IOM uint32_t CPU_RESET  : 1;            /*!< [2..2] Reset from CPU                                                     */
      __IOM uint32_t EFC_RESET  : 1;            /*!< [3..3] Reset from EFC                                                     */
      __IOM uint32_t WDG_RESET  : 1;            /*!< [4..4] Reset from WDG                                                     */
      __IOM uint32_t IWDG_RESET : 1;            /*!< [5..5] Reset from IWDG                                                    */
      __IOM uint32_t BOR_RESET  : 1;            /*!< [6..6] Reset from BOR                                                     */
            uint32_t            : 25;
    } RST_SR_b;
  } ;
  
  union {
    __IOM uint32_t RST_CR;                      /*!< (@ 0x00000024) Reset control register                                     */
    
    struct {
            uint32_t            : 1;
      __IOM uint32_t SEC_RESET_REQ : 1;         /*!< [1..1] SEC reset request                                                  */
      __IOM uint32_t CPU_RESET_REQ : 1;         /*!< [2..2] CPU reset request                                                  */
      __IOM uint32_t EFC_RESET_REQ : 1;         /*!< [3..3] EFC reset request                                                  */
      __IOM uint32_t WDG_RESET_REQ : 1;         /*!< [4..4] WDG reset request                                                  */
      __IOM uint32_t IWDG_RESET_REQ : 1;        /*!< [5..5] IWDG reset request                                                 */
            uint32_t            : 26;
    } RST_CR_b;
  } ;
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x00000028) Status register                                            */
    
    struct {
      __IM  uint32_t IWDG_AON_CLK_EN_DONE : 1;  /*!< [0..0] UNKNOWN                                                            */
      __IM  uint32_t RTC_AON_CLK_EN_DONE : 1;   /*!< [1..1] UNKNOWN                                                            */
      __IM  uint32_t LPUART_AON_CLK_EN_DONE : 1;/*!< [2..2] UNKNOWN                                                            */
      __IM  uint32_t LCD_AON_CLK_EN_DONE : 1;   /*!< [3..3] UNKNOWN                                                            */
      __IM  uint32_t LPTIMER0_AON_CLK_EN_DONE : 1;/*!< [4..4] UNKNOWN                                                          */
      __IM  uint32_t LPTIMER1_AON_CLK_EN_DONE : 1;/*!< [5..5] UNKNOWN                                                          */
            uint32_t            : 26;
    } SR_b;
  } ;
  
  union {
    __IM  uint32_t SR1;                         /*!< (@ 0x0000002C) Status register 1                                          */
    
    struct {
      __IM  uint32_t IWDG_AON_CLK_EN_SYNC : 1;  /*!< [0..0] UNKNOWN                                                            */
      __IM  uint32_t RTC_AON_CLK_EN_SYNC : 1;   /*!< [1..1] UNKNOWN                                                            */
      __IM  uint32_t LPUART_AON_CLK_EN_SYNC : 1;/*!< [2..2] UNKNOWN                                                            */
      __IM  uint32_t LCD_AON_CLK_EN_SYNC : 1;   /*!< [3..3] UNKNOWN                                                            */
      __IM  uint32_t LPTIMER0_AON_CLK_EN_SYNC : 1;/*!< [4..4] UNKNOWN                                                          */
      __IM  uint32_t I2S_CLK_EN_SYNC : 1;       /*!< [5..5] UNKNOWN                                                            */
      __IM  uint32_t MCO_CLK_EN_SYNC : 1;       /*!< [6..6] UNKNOWN                                                            */
      __IM  uint32_t RTC_CLK_EN_SYNC : 1;       /*!< [7..7] UNKNOWN                                                            */
      __IM  uint32_t IWDG_CLK_EN_SYNC : 1;      /*!< [8..8] UNKNOWN                                                            */
      __IM  uint32_t LCD_CLK_EN_SYNC : 1;       /*!< [9..9] UNKNOWN                                                            */
      __IM  uint32_t LPUART_CLK_EN_SYNC : 1;    /*!< [10..10] UNKNOWN                                                          */
      __IM  uint32_t QSPI_CLK_EN_SYNC : 1;      /*!< [11..11] UNKNOWN                                                          */
      __IM  uint32_t LPTIMER0_CLK_EN_SYNC : 1;  /*!< [12..12] UNKNOWN                                                          */
      __IM  uint32_t ADC_CLK_EN_SYNC : 1;       /*!< [13..13] UNKNOWN                                                          */
      __IM  uint32_t SCC_CLK_EN_SYNC : 1;       /*!< [14..14] UNKNOWN                                                          */
      __IM  uint32_t UART3_CLK_EN_SYNC : 1;     /*!< [15..15] UNKNOWN                                                          */
      __IM  uint32_t UART2_CLK_EN_SYNC : 1;     /*!< [16..16] UNKNOWN                                                          */
      __IM  uint32_t UART1_CLK_EN_SYNC : 1;     /*!< [17..17] UNKNOWN                                                          */
      __IM  uint32_t UART0_CLK_EN_SYNC : 1;     /*!< [18..18] UNKNOWN                                                          */
      __IM  uint32_t LPTIMER1_AON_CLK_EN_SYNC : 1;/*!< [19..19] UNKNOWN                                                        */
      __IM  uint32_t LPTIMER1_CLK_EN_SYNC : 1;  /*!< [20..20] UNKNOWN                                                          */
            uint32_t            : 11;
    } SR1_b;
  } ;
  
  union {
    __IOM uint32_t CR3;                         /*!< (@ 0x00000030) Clock control register 3                                   */
    
    struct {
      __IOM uint32_t I2S_SCLK_DIV : 8;          /*!< [7..0] UNKNOWN                                                            */
      __IOM uint32_t I2S_MCLK_DIV : 8;          /*!< [15..8] UNKNOWN                                                           */
            uint32_t            : 16;
    } CR3_b;
  } ;
} ASR_RCC_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           AFEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog Front-End Controller (AFEC)
  */

typedef struct {                                /*!< (@ 0x40008000) AFEC Structure                                             */
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t REG_0x02;                    /*!< (@ 0x00000008) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 13;
      __IOM uint32_t XO32K_OSC  : 2;            /*!< [14..13] UNKNOWN                                                          */
      __IOM uint32_t RCO32K_OSC : 1;            /*!< [15..15] UNKNOWN                                                          */
            uint32_t            : 16;
    } REG_0x02_b;
  } ;
  
  union {
    __IOM uint32_t REG_0x03;                    /*!< (@ 0x0000000C) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 7;
      __IOM uint32_t LPWR_XO32K : 1;            /*!< [7..7] XO32K low power mode enable                                        */
            uint32_t            : 24;
    } REG_0x03_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t REG_0x05;                    /*!< (@ 0x00000014) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t LPWR_RUN   : 1;            /*!< [3..3] UNKNOWN                                                            */
            uint32_t            : 28;
    } REG_0x05_b;
  } ;
  
  union {
    __IOM uint32_t REG_0x06;                    /*!< (@ 0x00000018) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 3;
      __IOM uint32_t XO24M_OSC  : 2;            /*!< [4..3] UNKNOWN                                                            */
      __IOM uint32_t RCO48M_OSC : 1;            /*!< [5..5] UNKNOWN                                                            */
      __IOM uint32_t RCO4M_OSC  : 1;            /*!< [6..6] UNKNOWN                                                            */
      __IOM uint32_t LCD_ANA    : 1;            /*!< [7..7] UNKNOWN                                                            */
            uint32_t            : 12;
      __IOM uint32_t LPWR_RUN   : 2;            /*!< [21..20] UNKNOWN                                                          */
            uint32_t            : 10;
    } REG_0x06_b;
  } ;
  __IM  uint32_t  RESERVED2[2];
  __IOM uint32_t  REG_0x09;                     /*!< (@ 0x00000024) LCD register                                               */
  __IOM uint32_t  REG_0x0A;                     /*!< (@ 0x00000028) LCD register                                               */
  __IOM uint32_t  REG_0x0B;                     /*!< (@ 0x0000002C) LCD register                                               */
  __IOM uint32_t  REG_0x0C;                     /*!< (@ 0x00000030) UNKNOWN                                                    */
  __IM  uint32_t  RESERVED3[4];
  
  union {
    __IOM uint32_t REG_0x11;                    /*!< (@ 0x00000044) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 6;
      __IOM uint32_t ADC        : 4;            /*!< [9..6] UNKNOWN                                                            */
            uint32_t            : 14;
      __IOM uint32_t DAC        : 2;            /*!< [25..24] UNKNOWN                                                          */
            uint32_t            : 6;
    } REG_0x11_b;
  } ;
  
  union {
    __IOM uint32_t REG_0x12;                    /*!< (@ 0x00000048) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 6;
      __IOM uint32_t ADC_REF_VOLTAGE : 1;       /*!< [6..6] ADC reference voltage source                                       */
            uint32_t            : 1;
      __IOM uint32_t DAC        : 1;            /*!< [8..8] UNKNOWN                                                            */
            uint32_t            : 23;
    } REG_0x12_b;
  } ;
  __IM  uint32_t  RESERVED4[20];
  
  union {
    __IOM uint32_t REG_0x27;                    /*!< (@ 0x0000009C) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 11;
      __IOM uint32_t DAC_EN     : 2;            /*!< [12..11] UNKNOWN                                                          */
            uint32_t            : 19;
    } REG_0x27_b;
  } ;
  __IM  uint32_t  RESERVED5[4];
  
  union {
    __IOM uint32_t REG_0x2C;                    /*!< (@ 0x000000B0) UNKNOWN                                                    */
    
    struct {
            uint32_t            : 25;
      __IOM uint32_t ADC_VBAT31 : 1;            /*!< [25..25] VBAT31 (VBAT/3) voltage                                          */
            uint32_t            : 6;
    } REG_0x2C_b;
  } ;
  __IM  uint32_t  RESERVED6[83];
  __IOM uint32_t  CR;                           /*!< (@ 0x00000200) Control register                                           */
  __IOM uint32_t  INT_SR;                       /*!< (@ 0x00000204) Interrupt status register                                  */
  
  union {
    __IM  uint32_t RAW_SR;                      /*!< (@ 0x00000208) Raw status register                                        */
    
    struct {
            uint32_t            : 2;
      __IM  uint32_t RCO48M_READY : 1;          /*!< [2..2] UNKNOWN                                                            */
            uint32_t            : 27;
      __IM  uint32_t PLL_UNLOCK : 1;            /*!< [30..30] UNKNOWN                                                          */
      __IM  uint32_t RCO4M_READY : 1;           /*!< [31..31] UNKNOWN                                                          */
    } RAW_SR_b;
  } ;
} ASR_AFEC_Type;                                /*!< Size = 524 (0x20c)                                                        */



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Configuration Controller (SYSCFG)
  */

typedef struct {                                /*!< (@ 0x40001000) SYSCFG Structure                                           */
  
  union {
    __IOM uint32_t CR0;                         /*!< (@ 0x00000000) Control register 0                                         */
    
    struct {
      __IOM uint32_t DMA0_CH3_HANDSHAKE : 6;    /*!< [5..0] DMA0 Channel 3 handshake selection                                 */
            uint32_t            : 2;
      __IOM uint32_t DMA0_CH2_HANDSHAKE : 6;    /*!< [13..8] DMA0 Channel 2 handshake selection                                */
            uint32_t            : 2;
      __IOM uint32_t DMA0_CH1_HANDSHAKE : 6;    /*!< [21..16] DMA0 Channel 1 handshake selection                               */
            uint32_t            : 2;
      __IOM uint32_t DMA0_CH0_HANDSHAKE : 6;    /*!< [29..24] DMA0 Channel 0 handshake selection                               */
            uint32_t            : 2;
    } CR0_b;
  } ;
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000004) Control register 1                                         */
    
    struct {
      __IOM uint32_t DMA1_CH3_HANDSHAKE : 6;    /*!< [5..0] DMA1 Channel 3 handshake selection                                 */
            uint32_t            : 2;
      __IOM uint32_t DMA1_CH2_HANDSHAKE : 6;    /*!< [13..8] DMA1 Channel 2 handshake selection                                */
            uint32_t            : 2;
      __IOM uint32_t DMA1_CH1_HANDSHAKE : 6;    /*!< [21..16] DMA1 Channel 1 handshake selection                               */
            uint32_t            : 2;
      __IOM uint32_t DMA1_CH0_HANDSHAKE : 6;    /*!< [29..24] DMA1 Channel 0 handshake selection                               */
            uint32_t            : 2;
    } CR1_b;
  } ;
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000008) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x0000000C) Control register 3                                         */
  
  union {
    __IOM uint32_t CR4;                         /*!< (@ 0x00000010) Control register 4                                         */
    
    struct {
            uint32_t            : 29;
      __IOM uint32_t BOOT_MODE  : 1;            /*!< [29..29] UNKNOWN                                                          */
            uint32_t            : 2;
    } CR4_b;
  } ;
  __IOM uint32_t  CR5;                          /*!< (@ 0x00000014) Control register 5                                         */
  __IOM uint32_t  CR6;                          /*!< (@ 0x00000018) Control register 6                                         */
  __IOM uint32_t  CR7;                          /*!< (@ 0x0000001C) Control register 7                                         */
  __IOM uint32_t  CR8;                          /*!< (@ 0x00000020) Control register 8                                         */
  __IOM uint32_t  CR9;                          /*!< (@ 0x00000024) Control register 9                                         */
  
  union {
    __IOM uint32_t CR10;                        /*!< (@ 0x00000028) Control register 10                                        */
    
    struct {
            uint32_t            : 14;
      __IOM uint32_t I2S_MASTER : 1;            /*!< [14..14] I2S master mode                                                  */
      __IOM uint32_t I2S_WS_FREQ_DEV : 7;       /*!< [21..15] I2S WS frequency divider                                         */
      __IOM uint32_t I2S_WS     : 1;            /*!< [22..22] I2S WS output                                                    */
      __IOM uint32_t I2S_WS_DELAY : 1;          /*!< [23..23] UNKNOWN                                                          */
            uint32_t            : 8;
    } CR10_b;
  } ;
} ASR_SYSCFG_Type;                              /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal Asynchronous Receiver/Transmitter Controller (UART)
  */

typedef struct {                                /*!< (@ 0x40003000) UART0 Structure                                            */
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000000) Data register                                              */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] Data character                                                     */
      __IOM uint32_t FE         : 1;            /*!< [8..8] Framing error                                                      */
      __IOM uint32_t PE         : 1;            /*!< [9..9] Parity error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [10..10] Break error                                                      */
      __IOM uint32_t OE         : 1;            /*!< [11..11] Overrun error                                                    */
            uint32_t            : 20;
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t RSC_ECR;                     /*!< (@ 0x00000004) Receive status and error clear register                    */
    
    struct {
      __IOM uint32_t FE         : 1;            /*!< [0..0] Framing error                                                      */
      __IOM uint32_t PE         : 1;            /*!< [1..1] Parity error                                                       */
      __IOM uint32_t BE         : 1;            /*!< [2..2] Break error                                                        */
      __IOM uint32_t OE         : 1;            /*!< [3..3] Overrun error                                                      */
            uint32_t            : 28;
    } RSC_ECR_b;
  } ;
  __IM  uint32_t  RESERVED[4];
  
  union {
    __IM  uint32_t FR;                          /*!< (@ 0x00000018) Flag register                                              */
    
    struct {
      __IM  uint32_t CTS        : 1;            /*!< [0..0] Clear to send                                                      */
      __IM  uint32_t DSR        : 1;            /*!< [1..1] Data set ready                                                     */
      __IM  uint32_t DCD        : 1;            /*!< [2..2] Data carrier detect                                                */
      __IM  uint32_t BUSY       : 1;            /*!< [3..3] Busy                                                               */
      __IM  uint32_t RXFE       : 1;            /*!< [4..4] Receive FIFO empty                                                 */
      __IM  uint32_t TXFF       : 1;            /*!< [5..5] Transmit FIFO full                                                 */
      __IM  uint32_t RXFF       : 1;            /*!< [6..6] Receive FIFO full                                                  */
      __IM  uint32_t TXFE       : 1;            /*!< [7..7] Transmit FIFO empty                                                */
      __IM  uint32_t RI         : 1;            /*!< [8..8] Ring indicator                                                     */
            uint32_t            : 23;
    } FR_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t ILPR;                        /*!< (@ 0x00000020) IRDA low power counter register                            */
    
    struct {
      __IOM uint32_t ILPDVSR    : 8;            /*!< [7..0] 8-bit low-power divisor value                                      */
            uint32_t            : 24;
    } ILPR_b;
  } ;
  
  union {
    __IOM uint32_t IBRD;                        /*!< (@ 0x00000024) Integer baud rate register                                 */
    
    struct {
      __IOM uint32_t BAUD_DIVINT : 16;          /*!< [15..0] The integer baud rate divisor                                     */
            uint32_t            : 16;
    } IBRD_b;
  } ;
  
  union {
    __IOM uint32_t FBRD;                        /*!< (@ 0x00000028) Fractional baud rate register                              */
    
    struct {
      __IOM uint32_t BAUD_DIVFRAC : 6;          /*!< [5..0] The fractional baud rate divisor                                   */
            uint32_t            : 26;
    } FBRD_b;
  } ;
  
  union {
    __IOM uint32_t LCR_H;                       /*!< (@ 0x0000002C) Line control register                                      */
    
    struct {
      __IOM uint32_t BRK        : 1;            /*!< [0..0] Send break                                                         */
      __IOM uint32_t PEN        : 1;            /*!< [1..1] Parity enable                                                      */
      __IOM uint32_t EPS        : 1;            /*!< [2..2] Even parity select                                                 */
      __IOM uint32_t STP2       : 1;            /*!< [3..3] Stop bits number                                                   */
      __IOM uint32_t FEN        : 1;            /*!< [4..4] Enable FIFOs                                                       */
      __IOM uint32_t WLEN       : 2;            /*!< [6..5] Data width                                                         */
      __IOM uint32_t SPS        : 1;            /*!< [7..7] Stick parity select                                                */
            uint32_t            : 24;
    } LCR_H_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000030) Control register                                           */
    
    struct {
      __IOM uint32_t UARTEN     : 1;            /*!< [0..0] UART enable                                                        */
      __IOM uint32_t SIREN      : 1;            /*!< [1..1] SIR enable                                                         */
      __IOM uint32_t SIRLP      : 1;            /*!< [2..2] SIR low-power IrDA mode                                            */
            uint32_t            : 4;
      __IOM uint32_t LBE        : 1;            /*!< [7..7] Loopback enable                                                    */
      __IOM uint32_t TXE        : 1;            /*!< [8..8] Transmit enable                                                    */
      __IOM uint32_t RXE        : 1;            /*!< [9..9] Receive enable                                                     */
            uint32_t            : 4;
      __IOM uint32_t RTSEN      : 1;            /*!< [14..14] RTS hardware flow control enable                                 */
      __IOM uint32_t CTSEN      : 1;            /*!< [15..15] CTS hardware flow control enable                                 */
            uint32_t            : 16;
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IFLS;                        /*!< (@ 0x00000034) Interrupt fifo level select register                       */
    
    struct {
      __IOM uint32_t TXIFLSEL   : 3;            /*!< [2..0] Transmit interrupt FIFO level select                               */
      __IOM uint32_t RXIFLSEL   : 3;            /*!< [5..3] Receive interrupt FIFO level select                                */
            uint32_t            : 26;
    } IFLS_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000038) Interrupt mask set/clear register                          */
    
    struct {
            uint32_t            : 4;
      __IOM uint32_t RX         : 1;            /*!< [4..4] Receive interrupt mask                                             */
      __IOM uint32_t TX         : 1;            /*!< [5..5] Transmit interrupt mask                                            */
      __IOM uint32_t RT         : 1;            /*!< [6..6] Receive timeout interrupt mask                                     */
      __IOM uint32_t FE         : 1;            /*!< [7..7] Framing error interrupt mask                                       */
      __IOM uint32_t PE         : 1;            /*!< [8..8] Parity error interrupt mask                                        */
      __IOM uint32_t BE         : 1;            /*!< [9..9] Break error interrupt mask                                         */
      __IOM uint32_t OE         : 1;            /*!< [10..10] Overrun error interrupt mask                                     */
            uint32_t            : 21;
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x0000003C) Raw interrupt status register                              */
    
    struct {
            uint32_t            : 4;
      __IM  uint32_t RX         : 1;            /*!< [4..4] Receive interrupt status                                           */
      __IM  uint32_t TX         : 1;            /*!< [5..5] Transmit interrupt status                                          */
      __IM  uint32_t RT         : 1;            /*!< [6..6] Receive timeout interrupt status                                   */
      __IM  uint32_t FE         : 1;            /*!< [7..7] Framing error interrupt status                                     */
      __IM  uint32_t PE         : 1;            /*!< [8..8] Parity error interrupt status                                      */
      __IM  uint32_t BE         : 1;            /*!< [9..9] Break error interrupt status                                       */
      __IM  uint32_t OE         : 1;            /*!< [10..10] Overrun error interrupt status                                   */
            uint32_t            : 21;
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000040) Masked interrupt status register                           */
    
    struct {
            uint32_t            : 4;
      __IM  uint32_t RX         : 1;            /*!< [4..4] Receive masked interrupt status                                    */
      __IM  uint32_t TX         : 1;            /*!< [5..5] Transmit masked interrupt status                                   */
      __IM  uint32_t RT         : 1;            /*!< [6..6] Receive timeout masked interrupt status                            */
      __IM  uint32_t FE         : 1;            /*!< [7..7] Framing error masked interrupt status                              */
      __IM  uint32_t PE         : 1;            /*!< [8..8] Parity error masked interrupt status                               */
      __IM  uint32_t BE         : 1;            /*!< [9..9] Break error masked interrupt status                                */
      __IM  uint32_t OE         : 1;            /*!< [10..10] Overrun error masked interrupt status                            */
            uint32_t            : 21;
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000044) Interrupt clear register                                   */
    
    struct {
            uint32_t            : 4;
      __OM  uint32_t RX         : 1;            /*!< [4..4] Receive interrupt clear                                            */
      __OM  uint32_t TX         : 1;            /*!< [5..5] Transmit interrupt clear                                           */
      __OM  uint32_t RT         : 1;            /*!< [6..6] Receive timeout interrupt clear                                    */
      __OM  uint32_t FE         : 1;            /*!< [7..7] Frame error interrupt clear                                        */
      __OM  uint32_t PE         : 1;            /*!< [8..8] Parity error interrupt clear                                       */
      __OM  uint32_t BE         : 1;            /*!< [9..9] Break error interrupt clear                                        */
      __OM  uint32_t OE         : 1;            /*!< [10..10] Overrun error interrupt clear                                    */
            uint32_t            : 21;
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMACR;                       /*!< (@ 0x00000048) DMA control register                                       */
    
    struct {
      __IOM uint32_t RX         : 1;            /*!< [0..0] Receive DMA enable                                                 */
      __IOM uint32_t TX         : 1;            /*!< [1..1] Transmit DMA enable                                                */
      __IOM uint32_t ONERR      : 1;            /*!< [2..2] DMA on error                                                       */
            uint32_t            : 29;
    } DMACR_b;
  } ;
} ASR_UART_Type;                                /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                            EFC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Embedded Flash Controller (EFC)
  */

typedef struct {                                /*!< (@ 0x40020000) EFC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Control register                                           */
    
    struct {
      __IOM uint32_t MASS_ERASE : 1;            /*!< [0..0] Mass erase                                                         */
      __IOM uint32_t PAGE_ERASE : 1;            /*!< [1..1] Page erase                                                         */
      __IOM uint32_t PROG       : 1;            /*!< [2..2] Flash programming                                                  */
      __IOM uint32_t PROG_MODE  : 1;            /*!< [3..3] Flash programming mode                                             */
      __IOM uint32_t READ_ACC   : 1;            /*!< [4..4] UNKNOWN                                                            */
      __IOM uint32_t PREFETCH   : 1;            /*!< [5..5] Prefetch buffer                                                    */
      __IOM uint32_t WRITE_RELEASE : 1;         /*!< [6..6] UNKNOWN                                                            */
      __IOM uint32_t FACTORY_OP : 1;            /*!< [7..7] UNKNOWN                                                            */
      __IOM uint32_t OPTION_OP  : 1;            /*!< [8..8] UNKNOWN                                                            */
      __IOM uint32_t ECC        : 1;            /*!< [9..9] Error correction code                                              */
            uint32_t            : 21;
      __IOM uint32_t INFO_LOAD  : 1;            /*!< [31..31] UNKNOWN                                                          */
    } CR_b;
  } ;
  __IOM uint32_t  INT_EN;                       /*!< (@ 0x00000004) Interrupt enable register                                  */
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000008) Status register                                            */
    
    struct {
      __IOM uint32_t OPERATION_DONE : 1;        /*!< [0..0] Operation                                                          */
      __IOM uint32_t READ_NUM_DONE : 1;         /*!< [1..1] Latency? change                                                    */
      __IOM uint32_t PROGRAM_DATA_WAIT : 1;     /*!< [2..2] Wait for data programming                                          */
            uint32_t            : 1;
      __IOM uint32_t OPTION_WRITE_ERROR : 1;    /*!< [4..4] UNKNOWN                                                            */
            uint32_t            : 27;
    } SR_b;
  } ;
  __IOM uint32_t  PROGRAM_DATA0;                /*!< (@ 0x0000000C) Program data0 register                                     */
  __IOM uint32_t  PROGRAM_DATA1;                /*!< (@ 0x00000010) Program data1 register                                     */
  
  union {
    __IOM uint32_t TIMING_CFG;                  /*!< (@ 0x00000014) Timing config register                                     */
    
    struct {
            uint32_t            : 16;
      __IOM uint32_t READ_NUM   : 4;            /*!< [19..16] Latency?                                                         */
            uint32_t            : 12;
    } TIMING_CFG_b;
  } ;
  __OM  uint32_t  PROTECT_SEQ;                  /*!< (@ 0x00000018) Security sequence                                          */
  __IM  uint32_t  RESERVED;
  __IM  uint32_t  CHIP_PATTERN;                 /*!< (@ 0x00000020) Chip pattern register                                      */
  __IM  uint32_t  IP_TRIM_L;                    /*!< (@ 0x00000024) Analog ip trimming low register                            */
  __IM  uint32_t  IP_TRIM_H;                    /*!< (@ 0x00000028) Analog ip trimming high register                           */
  __IM  uint32_t  SN_L;                         /*!< (@ 0x0000002C) Serial number low register                                 */
  __IM  uint32_t  SN_H;                         /*!< (@ 0x00000030) Serial number high register                                */
  __IM  uint32_t  TEST_INFO_L;                  /*!< (@ 0x00000034) Test info low register                                     */
  __IM  uint32_t  TEST_INFO_H;                  /*!< (@ 0x00000038) Test info high register                                    */
  __IM  uint32_t  OPTION_CSR_BYTES;             /*!< (@ 0x0000003C) Option control and status register                         */
  __IM  uint32_t  OPTION_EO_BYTES;              /*!< (@ 0x00000040) Option exe-only bytes register                             */
  __IM  uint32_t  OPTION_WP_BYTES;              /*!< (@ 0x00000044) Option write-protect bytes register                        */
  __IM  uint32_t  OPTION_SEC_BYTES0;            /*!< (@ 0x00000048) Option secure byte 0 register                              */
  __IM  uint32_t  OPTION_SEC_BYTES1;            /*!< (@ 0x0000004C) Option secure byte 1 register                              */
} ASR_EFC_Type;                                 /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIO)
  */

typedef struct {                                /*!< (@ 0x4001F000) GPIOA Structure                                            */
  __IOM uint32_t  OER;                          /*!< (@ 0x00000000) Output enable register                                     */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) Output type register                                       */
  __IOM uint32_t  IER;                          /*!< (@ 0x00000008) Input type register                                        */
  __IOM uint32_t  PER;                          /*!< (@ 0x0000000C) Pull enable register                                       */
  __IOM uint32_t  PSR;                          /*!< (@ 0x00000010) Pull select register                                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000014) Input data register                                        */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000018) Output data register                                       */
  __OM  uint32_t  BRR;                          /*!< (@ 0x0000001C) Bit reset register                                         */
  __OM  uint32_t  BSR;                          /*!< (@ 0x00000020) Bit set register                                           */
  __IOM uint32_t  DSR;                          /*!< (@ 0x00000024) Drive set register                                         */
  __IOM uint32_t  ICR;                          /*!< (@ 0x00000028) Interrupt control register                                 */
  __IOM uint32_t  IFR;                          /*!< (@ 0x0000002C) Interrupt flag register                                    */
  __IOM uint32_t  WUCR;                         /*!< (@ 0x00000030) Wakeup control register                                    */
  __IOM uint32_t  WULVL;                        /*!< (@ 0x00000034) Wakeup level register                                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000038) Alternate function low register                            */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x0000003C) Alternate function high register                           */
  __IOM uint32_t  STOP3_WUCR;                   /*!< (@ 0x00000040) Stop3 wakeup control register                              */
} ASR_GPIO_Type;                                /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           SSP                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Synchronous Serial Port Controller (SSP)
  */

typedef struct {                                /*!< (@ 0x40006000) SSP0 Structure                                             */
  
  union {
    __IOM uint32_t CR0;                         /*!< (@ 0x00000000) Control register 0                                         */
    
    struct {
      __IOM uint32_t DSS        : 4;            /*!< [3..0] Data size select                                                   */
      __IOM uint32_t FRF        : 2;            /*!< [5..4] Frame format                                                       */
      __IOM uint32_t SPO        : 1;            /*!< [6..6] Serial clock polarity                                              */
      __IOM uint32_t SPH        : 1;            /*!< [7..7] Serial clock phase                                                 */
      __IOM uint32_t SCR        : 8;            /*!< [15..8] Serial clock rate                                                 */
            uint32_t            : 16;
    } CR0_b;
  } ;
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000004) Control register 1                                         */
    
    struct {
      __IOM uint32_t LBM        : 1;            /*!< [0..0] Loop back mode                                                     */
      __IOM uint32_t SSE        : 1;            /*!< [1..1] SSP enable                                                         */
      __IOM uint32_t MS         : 1;            /*!< [2..2] Master or slave mode select                                        */
      __IOM uint32_t SOD        : 1;            /*!< [3..3] Slave-mode output disable                                          */
            uint32_t            : 28;
    } CR1_b;
  } ;
  __IOM uint32_t  DR;                           /*!< (@ 0x00000008) Data register                                              */
  
  union {
    __IM  uint32_t SR;                          /*!< (@ 0x0000000C) Status register                                            */
    
    struct {
      __IM  uint32_t TFE        : 1;            /*!< [0..0] Transmit FIFO empty                                                */
      __IM  uint32_t TNF        : 1;            /*!< [1..1] Transmit FIFO not full                                             */
      __IM  uint32_t RNE        : 1;            /*!< [2..2] Receive FIFO not empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [3..3] Receive FIFO full                                                  */
      __IM  uint32_t BSY        : 1;            /*!< [4..4] SSP busy flag                                                      */
            uint32_t            : 27;
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t CPSR;                        /*!< (@ 0x00000010) Clock prescale register                                    */
    
    struct {
      __IOM uint32_t CPSDVSR    : 8;            /*!< [7..0] Clock prescale divisor. Must be an even number between
                                                     2-254                                                                     */
            uint32_t            : 24;
    } CPSR_b;
  } ;
  
  union {
    __IOM uint32_t IMSC;                        /*!< (@ 0x00000014) Interrupt mask set or clear register                       */
    
    struct {
      __IOM uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt mask                                     */
      __IOM uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt mask                                     */
      __IOM uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt mask                                        */
      __IOM uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt mask                                       */
            uint32_t            : 28;
    } IMSC_b;
  } ;
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x00000018) Raw interrupt status register                              */
    
    struct {
      __IM  uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt status                                   */
      __IM  uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt status                                   */
      __IM  uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt status                                      */
      __IM  uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt status                                     */
            uint32_t            : 28;
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x0000001C) Masked interrupt status register                           */
    
    struct {
      __IM  uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt status                                   */
      __IM  uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt status                                   */
      __IM  uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt status                                      */
      __IM  uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt status                                     */
            uint32_t            : 28;
    } MIS_b;
  } ;
  
  union {
    __OM  uint32_t ICR;                         /*!< (@ 0x00000020) Interrupt clear register                                   */
    
    struct {
      __OM  uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt clear                                    */
      __OM  uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt clear                                    */
            uint32_t            : 30;
    } ICR_b;
  } ;
  
  union {
    __IOM uint32_t DMA_CR;                      /*!< (@ 0x00000024) DMA control register                                       */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] Receive DMA enable                                                 */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] Transmit DMA enable                                                */
            uint32_t            : 30;
    } DMA_CR_b;
  } ;
} ASR_SSP_Type;                                /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                           LORAC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief LORA Controller (LORAC)
  */

typedef struct {                                /*!< (@ 0x40009000) LORAC Structure                                            */
  
  union {
    __IOM uint32_t SSP_CR0;                     /*!< (@ 0x00000000) SSP control register 0                                     */
    
    struct {
      __IOM uint32_t DSS        : 4;            /*!< [3..0] Data size select                                                   */
      __IOM uint32_t FRF        : 2;            /*!< [5..4] Frame format                                                       */
      __IOM uint32_t SPO        : 1;            /*!< [6..6] Serial clock polarity                                              */
      __IOM uint32_t SPH        : 1;            /*!< [7..7] Serial clock phase                                                 */
      __IOM uint32_t SCR        : 8;            /*!< [15..8] Serial clock rate                                                 */
            uint32_t            : 16;
    } SSP_CR0_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CR1;                     /*!< (@ 0x00000004) SSP control register 1                                     */
    
    struct {
      __IOM uint32_t LBM        : 1;            /*!< [0..0] Loop back mode                                                     */
      __IOM uint32_t SSE        : 1;            /*!< [1..1] SSP enable                                                         */
      __IOM uint32_t MS         : 1;            /*!< [2..2] Master or slave mode select                                        */
      __IOM uint32_t SOD        : 1;            /*!< [3..3] Slave-mode output disable                                          */
            uint32_t            : 28;
    } SSP_CR1_b;
  } ;
  __IOM uint32_t  SSP_DR;                       /*!< (@ 0x00000008) SSP data register                                          */
  
  union {
    __IM  uint32_t SSP_SR;                      /*!< (@ 0x0000000C) SSP status register                                        */
    
    struct {
      __IM  uint32_t TFE        : 1;            /*!< [0..0] Transmit FIFO empty                                                */
      __IM  uint32_t TNF        : 1;            /*!< [1..1] Transmit FIFO not full                                             */
      __IM  uint32_t RNE        : 1;            /*!< [2..2] Receive FIFO not empty                                             */
      __IM  uint32_t RFF        : 1;            /*!< [3..3] Receive FIFO full                                                  */
      __IM  uint32_t BSY        : 1;            /*!< [4..4] SSP busy flag                                                      */
            uint32_t            : 27;
    } SSP_SR_b;
  } ;
  
  union {
    __IOM uint32_t SSP_CPSR;                    /*!< (@ 0x00000010) SSP clock prescale register                                */
    
    struct {
      __IOM uint32_t CPSDVSR    : 8;            /*!< [7..0] Clock prescale divisor. Must be an even number between
                                                     2-254                                                                     */
            uint32_t            : 24;
    } SSP_CPSR_b;
  } ;
  
  union {
    __IOM uint32_t SSP_IMSC;                    /*!< (@ 0x00000014) SSP interrupt mask set or clear register                   */
    
    struct {
      __IOM uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt mask                                     */
      __IOM uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt mask                                     */
      __IOM uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt mask                                        */
      __IOM uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt mask                                       */
            uint32_t            : 28;
    } SSP_IMSC_b;
  } ;
  
  union {
    __IM  uint32_t SSP_RIS;                     /*!< (@ 0x00000018) SSP raw interrupt status register                          */
    
    struct {
      __IM  uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt status                                   */
      __IM  uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt status                                   */
      __IM  uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt status                                      */
      __IM  uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt status                                     */
            uint32_t            : 28;
    } SSP_RIS_b;
  } ;
  
  union {
    __IM  uint32_t SSP_MIS;                     /*!< (@ 0x0000001C) SSP masked interrupt status register                       */
    
    struct {
      __IM  uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt status                                   */
      __IM  uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt status                                   */
      __IM  uint32_t RX         : 1;            /*!< [2..2] Receive FIFO interrupt status                                      */
      __IM  uint32_t TX         : 1;            /*!< [3..3] Transmit FIFO interrupt status                                     */
            uint32_t            : 28;
    } SSP_MIS_b;
  } ;
  
  union {
    __IOM uint32_t SSP_ICR;                     /*!< (@ 0x00000020) SSP interrupt clear register                               */
    
    struct {
      __IOM uint32_t ROR        : 1;            /*!< [0..0] Receive overrun interrupt clear                                    */
      __IOM uint32_t RT         : 1;            /*!< [1..1] Receive timeout interrupt clear                                    */
            uint32_t            : 30;
    } SSP_ICR_b;
  } ;
  
  union {
    __IOM uint32_t SSP_DMA_CR;                  /*!< (@ 0x00000024) SSP DMA control register                                   */
    
    struct {
      __IOM uint32_t RXDMAE     : 1;            /*!< [0..0] Receive DMA enable                                                 */
      __IOM uint32_t TXDMAE     : 1;            /*!< [1..1] Transmit DMA enable                                                */
            uint32_t            : 30;
    } SSP_DMA_CR_b;
  } ;
  __IM  uint32_t  RESERVED[54];
  __IOM uint32_t  CR0;                          /*!< (@ 0x00000100) Control register 0                                         */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000104) Control register 1                                         */
  __IM  uint32_t  SR;                           /*!< (@ 0x00000108) Status register                                            */
  __IOM uint32_t  NSS_CR;                       /*!< (@ 0x0000010C) NSS control register                                       */
  __IOM uint32_t  SCK_CR;                       /*!< (@ 0x00000110) SCK control register                                       */
  __IOM uint32_t  MOSI_CR;                      /*!< (@ 0x00000114) MOSI control register                                      */
  __IOM uint32_t  MISO_CR;                      /*!< (@ 0x00000118) MISO control register                                      */
} ASR_LORAC_Type;                               /*!< Size = 284 (0x11c)                                                        */



/* =========================================================================================================================== */
/* ================                                            WDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watchdog Module (WDG)
  */

typedef struct {                                /*!< (@ 0x4001E000) WDG Structure                                              */
  __IOM uint32_t  LOAD;                         /*!< (@ 0x00000000) Load register                                              */
  __IM  uint32_t  VALUE;                        /*!< (@ 0x00000004) Value register                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000008) Control register                                           */
    
    struct {
      __IOM uint32_t INT        : 1;            /*!< [0..0] Enable the counter and the interrupt event                         */
      __IOM uint32_t RES        : 1;            /*!< [1..1] Enable Watchdog module reset output                                */
            uint32_t            : 30;
    } CONTROL_b;
  } ;
  __OM  uint32_t  INTCLR;                       /*!< (@ 0x0000000C) Value register                                             */
  
  union {
    __IM  uint32_t RIS;                         /*!< (@ 0x00000010) Raw interrupt status register                              */
    
    struct {
      __IM  uint32_t WDOG       : 1;            /*!< [0..0] Raw interrupt status from the counter                              */
            uint32_t            : 31;
    } RIS_b;
  } ;
  
  union {
    __IM  uint32_t MIS;                         /*!< (@ 0x00000014) Masked interrupt status register                           */
    
    struct {
      __IM  uint32_t WDOG       : 1;            /*!< [0..0] Masked interrupt status from the counter                           */
            uint32_t            : 31;
    } MIS_b;
  } ;
  __IM  uint32_t  RESERVED[762];
  __IOM uint32_t  LOCK;                         /*!< (@ 0x00000C00) Lock register                                              */
} ASR_WDG_Type;                                 /*!< Size = 3076 (0xc04)                                                       */



/* =========================================================================================================================== */
/* ================                                            SEC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief UNKNOWN (SEC)
  */

typedef struct {                                /*!< (@ 0x4000F000) SEC Structure                                              */
  __IOM uint32_t  INT;                          /*!< (@ 0x00000000) Interrupt enable register                                  */
  __IOM uint32_t  RST;                          /*!< (@ 0x00000004) Reset enable register                                      */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) Status register                                            */
  __IOM uint32_t  FILTER0;                      /*!< (@ 0x0000000C) UNKNOWN                                                    */
  __IOM uint32_t  FILTER1;                      /*!< (@ 0x00000010) UNKNOWN                                                    */
  __IOM uint32_t  FILTER2;                      /*!< (@ 0x00000014) UNKNOWN                                                    */
  __IOM uint32_t  FILTER3;                      /*!< (@ 0x00000018) UNKNOWN                                                    */
} ASR_SEC_Type;                                 /*!< Size = 28 (0x1c)                                                          */



/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define ASR_RCC_BASE                0x40000000UL
#define ASR_AFEC_BASE               0x40008000UL
#define ASR_SYSCFG_BASE             0x40001000UL
#define ASR_UART0_BASE              0x40003000UL
#define ASR_UART1_BASE              0x40004000UL
#define ASR_UART2_BASE              0x40010000UL
#define ASR_UART3_BASE              0x40011000UL
#define ASR_EFC_BASE                0x40020000UL
#define ASR_GPIOA_BASE              0x4001F000UL
#define ASR_GPIOB_BASE              0x4001F400UL
#define ASR_GPIOC_BASE              0x4001F800UL
#define ASR_GPIOD_BASE              0x4001FC00UL
#define ASR_SSP0_BASE               0x40006000UL
#define ASR_SSP1_BASE               0x40012000UL
#define ASR_SSP2_BASE               0x40013000UL
#define ASR_LORAC_BASE              0x40009000UL
#define ASR_WDG_BASE                0x4001E000UL
#define ASR_SEC_BASE                0x4000F000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define ASR_RCC                     ((ASR_RCC_Type*)           ASR_RCC_BASE)
#define ASR_AFEC                    ((ASR_AFEC_Type*)          ASR_AFEC_BASE)
#define ASR_SYSCFG                  ((ASR_SYSCFG_Type*)        ASR_SYSCFG_BASE)
#define ASR_UART0                   ((ASR_UART_Type*)          ASR_UART0_BASE)
#define ASR_UART1                   ((ASR_UART_Type*)          ASR_UART1_BASE)
#define ASR_UART2                   ((ASR_UART_Type*)          ASR_UART2_BASE)
#define ASR_UART3                   ((ASR_UART_Type*)          ASR_UART3_BASE)
#define ASR_EFC                     ((ASR_EFC_Type*)           ASR_EFC_BASE)
#define ASR_GPIOA                   ((ASR_GPIO_Type*)          ASR_GPIOA_BASE)
#define ASR_GPIOB                   ((ASR_GPIO_Type*)          ASR_GPIOB_BASE)
#define ASR_GPIOC                   ((ASR_GPIO_Type*)          ASR_GPIOC_BASE)
#define ASR_GPIOD                   ((ASR_GPIO_Type*)          ASR_GPIOD_BASE)
#define ASR_SSP0                    ((ASR_SSP_Type*)           ASR_SSP0_BASE)
#define ASR_SSP1                    ((ASR_SSP_Type*)           ASR_SSP1_BASE)
#define ASR_SSP2                    ((ASR_SSP_Type*)           ASR_SSP2_BASE)
#define ASR_LORAC                   ((ASR_LORAC_Type*)         ASR_LORAC_BASE)
#define ASR_WDG                     ((ASR_WDG_Type*)           ASR_WDG_BASE)
#define ASR_SEC                     ((ASR_SEC_Type*)           ASR_SEC_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif



/* =========================================================================================================================== */
/* ================                            Bit Definitions Peripheral Section                             ================ */
/* =========================================================================================================================== */

/* =========================================================================================================================== */
/* ================                                            EFC                                            ================ */
/* =========================================================================================================================== */
#define EFC_CR_INFO_LOAD_MASK              ((uint32_t)0x80000000)
#define EFC_CR_ECC_DISABLE_MASK            ((uint32_t)0x00000200)
#define EFC_CR_OPTION_OP_EN_MASK           ((uint32_t)0x00000100)
#define EFC_CR_FACTORY_OP_EN_MASK          ((uint32_t)0x00000080)
#define EFC_CR_WRITE_RELEASE_EN_MASK       ((uint32_t)0x00000040)
#define EFC_CR_PREFETCH_EN_MASK            ((uint32_t)0x00000020)
#define EFC_CR_READ_ACC_EN_MASK            ((uint32_t)0x00000010)
#define EFC_CR_PROG_MODE_MASK              ((uint32_t)0x00000008)
//#define EFC_CR_PROG_MODE_DWORD             ((uint32_t)0x00000000)
//#define EFC_CR_PROG_MODE_WLINE             ((uint32_t)0x00000008)
#define EFC_CR_PROG_EN_MASK                ((uint32_t)0x00000004)
#define EFC_CR_PAGE_ERASE_EN_MASK          ((uint32_t)0x00000002)
#define EFC_CR_MASS_ERASE_EN_MASK          ((uint32_t)0x00000001)


/* =========================================================================================================================== */
/* ================                                            SEC                                            ================ */
/* =========================================================================================================================== */
#define SEC_SR_FLASH_ACCESS_ERROR_MASK     ((uint32_t)0x00001000) /*!< SEC flash access error status*/






/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* =============================================  RCC CR0 STCLKEN_SEL [25..25]  ============================================== */
typedef enum {                                  /*!< RCC_CR0_STCLKEN_SEL                                                       */
  RCC_CR0_STCLKEN_SEL_XO32K            = 0,     /*!< XO32K : XO32K is SYSTICK clock source                                     */
  RCC_CR0_STCLKEN_SEL_RCO32K           = 1,     /*!< RCO32K : RCO32K is SYSTICK clock source                                   */
} RCC_CR0_STCLKEN_SEL_Enum;

/* =============================================  RCC CR0 MCO_CLK_DIV [22..24]  ============================================== */
typedef enum {                                  /*!< RCC_CR0_MCO_CLK_DIV                                                       */
  RCC_CR0_MCO_CLK_DIV_1                = 0,     /*!< 1 : MCO clock source is used directly                                     */
  RCC_CR0_MCO_CLK_DIV_2                = 4,     /*!< 2 : MCO clock source is divided by 2                                      */
  RCC_CR0_MCO_CLK_DIV_4                = 5,     /*!< 4 : MCO clock source is divided by 4                                      */
  RCC_CR0_MCO_CLK_DIV_8                = 6,     /*!< 8 : MCO clock source is divided by 8                                      */
  RCC_CR0_MCO_CLK_DIV_16               = 7,     /*!< 16 : MCO clock source is divided by 16                                    */
} RCC_CR0_MCO_CLK_DIV_Enum;

/* =============================================  RCC CR0 MCO_CLK_SEL [19..21]  ============================================== */
typedef enum {                                  /*!< RCC_CR0_MCO_CLK_SEL                                                       */
  RCC_CR0_MCO_CLK_SEL_RCO32K           = 0,     /*!< RCO32K : RCO32K is MCO clock source                                       */
  RCC_CR0_MCO_CLK_SEL_XO32K            = 1,     /*!< XO32K : XO32K is MCO clock source                                         */
  RCC_CR0_MCO_CLK_SEL_RCO4M            = 2,     /*!< RCO4M : RCO4M is MCO clock source                                         */
  RCC_CR0_MCO_CLK_SEL_XO24M            = 3,     /*!< XO24M : XO24M is MCO clock source                                         */
  RCC_CR0_MCO_CLK_SEL_XO32M            = 4,     /*!< XO32M : XO32M is MCO clock source                                         */
  RCC_CR0_MCO_CLK_SEL_RCO48M           = 5,     /*!< RCO48M : RCO48M is MCO clock source                                       */
  RCC_CR0_MCO_CLK_SEL_PLL              = 6,     /*!< PLL : PLL is MCO clock source                                             */
  RCC_CR0_MCO_CLK_SEL_SYSCLCK          = 7,     /*!< SYSCLCK : SYSCLCK is MCO clock source                                     */
} RCC_CR0_MCO_CLK_SEL_Enum;

/* =============================================  RCC CR0 MCO_CLK_OUT [18..18]  ============================================== */
typedef enum {                                  /*!< RCC_CR0_MCO_CLK_OUT                                                       */
  RCC_CR0_MCO_CLK_OUT_DIS              = 0,     /*!< DIS : MCO clock output disable                                            */
  RCC_CR0_MCO_CLK_OUT_EN               = 1,     /*!< EN : MCO clock output enable                                              */
} RCC_CR0_MCO_CLK_OUT_Enum;

/* ==============================================  RCC CR0 PCLK1_DIV [15..17]  =============================================== */
typedef enum {                                  /*!< RCC_CR0_PCLK1_DIV                                                         */
  RCC_CR0_PCLK1_DIV_1                  = 0,     /*!< 1 : PCLK1 clock source is used directly                                   */
  RCC_CR0_PCLK1_DIV_2                  = 1,     /*!< 2 : PCLK1 clock source is divided by 2                                    */
  RCC_CR0_PCLK1_DIV_4                  = 2,     /*!< 4 : PCLK1 clock source is divided by 4                                    */
  RCC_CR0_PCLK1_DIV_8                  = 3,     /*!< 8 : PCLK1 clock source is divided by 8                                    */
  RCC_CR0_PCLK1_DIV_16                 = 4,     /*!< 16 : PCLK1 clock source is divided by 16                                  */
} RCC_CR0_PCLK1_DIV_Enum;

/* ==============================================  RCC CR0 SYSCLK_SEL [12..14]  ============================================== */
typedef enum {                                  /*!< RCC_CR0_SYSCLK_SEL                                                        */
  RCC_CR0_SYSCLK_SEL_RCO48M_DIV2       = 0,     /*!< RCO48M_DIV2 : RCO48M / 2 is SYSCLK clock source                           */
  RCC_CR0_SYSCLK_SEL_RCO32K            = 1,     /*!< RCO32K : RCO32K is SYSCLK clock source                                    */
  RCC_CR0_SYSCLK_SEL_XO32K             = 2,     /*!< XO32K : XO32K is SYSCLK clock source                                      */
  RCC_CR0_SYSCLK_SEL_PLL               = 3,     /*!< PLL : PLL is SYSCLK clock source                                          */
  RCC_CR0_SYSCLK_SEL_XO24M             = 4,     /*!< XO24M : XO24M is SYSCLK clock source                                      */
  RCC_CR0_SYSCLK_SEL_XO32M             = 5,     /*!< XO32M : XO32M is SYSCLK clock source                                      */
  RCC_CR0_SYSCLK_SEL_RCO4M             = 6,     /*!< RCO4M : RCO4M is SYSCLK clock source                                      */
  RCC_CR0_SYSCLK_SEL_RCO48M            = 7,     /*!< RCO48M : RCO48M is SYSCLK clock source                                    */
} RCC_CR0_SYSCLK_SEL_Enum;

/* ===============================================  RCC CR0 HCLK_DIV [8..11]  ================================================ */
typedef enum {                                  /*!< RCC_CR0_HCLK_DIV                                                          */
  RCC_CR0_HCLK_DIV_1                   = 0,     /*!< 1 : HCLK clock source is used directly                                    */
  RCC_CR0_HCLK_DIV_2                   = 1,     /*!< 2 : HCLK clock source is divided by 2                                     */
  RCC_CR0_HCLK_DIV_4                   = 2,     /*!< 4 : HCLK clock source is divided by 4                                     */
  RCC_CR0_HCLK_DIV_8                   = 3,     /*!< 8 : HCLK clock source is divided by 8                                     */
  RCC_CR0_HCLK_DIV_16                  = 4,     /*!< 16 : HCLK clock source is divided by 16                                   */
  RCC_CR0_HCLK_DIV_32                  = 5,     /*!< 32 : HCLK clock source is divided by 32                                   */
  RCC_CR0_HCLK_DIV_64                  = 6,     /*!< 64 : HCLK clock source is divided by 64                                   */
  RCC_CR0_HCLK_DIV_128                 = 7,     /*!< 128 : HCLK clock source is divided by 128                                 */
  RCC_CR0_HCLK_DIV_256                 = 8,     /*!< 256 : HCLK clock source is divided by 256                                 */
  RCC_CR0_HCLK_DIV_512                 = 9,     /*!< 512 : HCLK clock source is divided by 512                                 */
} RCC_CR0_HCLK_DIV_Enum;

/* ===============================================  RCC CR0 PCLK0_DIV [5..7]  ================================================ */
typedef enum {                                  /*!< RCC_CR0_PCLK0_DIV                                                         */
  RCC_CR0_PCLK0_DIV_1                  = 0,     /*!< 1 : PCLK0 clock source is used directly                                   */
  RCC_CR0_PCLK0_DIV_2                  = 1,     /*!< 2 : PCLK0 clock source is divided by 2                                    */
  RCC_CR0_PCLK0_DIV_4                  = 2,     /*!< 4 : PCLK0 clock source is divided by 4                                    */
  RCC_CR0_PCLK0_DIV_8                  = 3,     /*!< 8 : PCLK0 clock source is divided by 8                                    */
  RCC_CR0_PCLK0_DIV_16                 = 4,     /*!< 16 : PCLK0 clock source is divided by 16                                  */
} RCC_CR0_PCLK0_DIV_Enum;

/* ==========================================================  CR1  ========================================================== */
/* =========================================  RCC CR1 LPTIMER1_EXTCLK_SEL [11..11]  ========================================== */
typedef enum {                                  /*!< RCC_CR1_LPTIMER1_EXTCLK_SEL                                               */
  RCC_CR1_LPTIMER1_EXTCLK_SEL_DIS      = 0,     /*!< DIS : LPTIMER1 external clock source disable                              */
  RCC_CR1_LPTIMER1_EXTCLK_SEL_EN       = 1,     /*!< EN : LPTIMER1 external clock source enable                                */
} RCC_CR1_LPTIMER1_EXTCLK_SEL_Enum;

/* =========================================  RCC CR1 LPTIMER0_EXTCLK_SEL [10..10]  ========================================== */
typedef enum {                                  /*!< RCC_CR1_LPTIMER0_EXTCLK_SEL                                               */
  RCC_CR1_LPTIMER0_EXTCLK_SEL_DIS      = 0,     /*!< DIS : LPTIMER0 external clock source disable                              */
  RCC_CR1_LPTIMER0_EXTCLK_SEL_EN       = 1,     /*!< EN : LPTIMER0 external clock source enable                                */
} RCC_CR1_LPTIMER0_EXTCLK_SEL_Enum;

/* ============================================  RCC CR1 LPTIMER1_CLK_SEL [8..9]  ============================================ */
typedef enum {                                  /*!< RCC_CR1_LPTIMER1_CLK_SEL                                                  */
  RCC_CR1_LPTIMER1_CLK_SEL_PCLK0       = 0,     /*!< PCLK0 : PCLK0 is LPTIMER1 clock source                                    */
  RCC_CR1_LPTIMER1_CLK_SEL_RCO4M       = 1,     /*!< RCO4M : RCO4M is LPTIMER1 clock source                                    */
  RCC_CR1_LPTIMER1_CLK_SEL_XO32K       = 2,     /*!< XO32K : XO32K is LPTIMER1 clock source                                    */
  RCC_CR1_LPTIMER1_CLK_SEL_RCO32K      = 3,     /*!< RCO32K : RCO32K is LPTIMER1 clock source                                  */
} RCC_CR1_LPTIMER1_CLK_SEL_Enum;

/* ============================================  RCC CR1 LPTIMER0_CLK_SEL [6..7]  ============================================ */
typedef enum {                                  /*!< RCC_CR1_LPTIMER0_CLK_SEL                                                  */
  RCC_CR1_LPTIMER0_CLK_SEL_PCLK0       = 0,     /*!< PCLK0 : PCLK0 is LPTIMER0 clock source                                    */
  RCC_CR1_LPTIMER0_CLK_SEL_RCO4M       = 1,     /*!< RCO4M : RCO4M is LPTIMER0 clock source                                    */
  RCC_CR1_LPTIMER0_CLK_SEL_XO32K       = 2,     /*!< XO32K : XO32K is LPTIMER0 clock source                                    */
  RCC_CR1_LPTIMER0_CLK_SEL_RCO32K      = 3,     /*!< RCO32K : RCO32K is LPTIMER0 clock source                                  */
} RCC_CR1_LPTIMER0_CLK_SEL_Enum;

/* ==============================================  RCC CR1 LCD_CLK_SEL [4..5]  =============================================== */
typedef enum {                                  /*!< RCC_CR1_LCD_CLK_SEL                                                       */
  RCC_CR1_LCD_CLK_SEL_XO32K            = 0,     /*!< XO32K : XO32K is LCD clock source                                         */
  RCC_CR1_LCD_CLK_SEL_RCO32K           = 1,     /*!< RCO32K : RCO32K is LCD clock source                                       */
  RCC_CR1_LCD_CLK_SEL_RCO4M            = 2,     /*!< RCO4M : RCO4M is LCD clock source                                         */
} RCC_CR1_LCD_CLK_SEL_Enum;

/* =============================================  RCC CR1 LPUART_CLK_SEL [2..3]  ============================================= */
typedef enum {                                  /*!< RCC_CR1_LPUART_CLK_SEL                                                    */
  RCC_CR1_LPUART_CLK_SEL_XO32K         = 0,     /*!< XO32K : XO32K is LPUART clock source                                      */
  RCC_CR1_LPUART_CLK_SEL_RCO32K        = 1,     /*!< RCO32K : RCO32K is LPUART clock source                                    */
  RCC_CR1_LPUART_CLK_SEL_RCO4M         = 2,     /*!< RCO4M : RCO4M is LPUART clock source                                      */
} RCC_CR1_LPUART_CLK_SEL_Enum;

/* ==============================================  RCC CR1 RTC_CLK_SEL [1..1]  =============================================== */
typedef enum {                                  /*!< RCC_CR1_RTC_CLK_SEL                                                       */
  RCC_CR1_RTC_CLK_SEL_XO32K            = 0,     /*!< XO32K : XO32K is RTC clock source                                         */
  RCC_CR1_RTC_CLK_SEL_RCO32K           = 1,     /*!< RCO32K : RCO32K is RTC clock source                                       */
} RCC_CR1_RTC_CLK_SEL_Enum;

/* ==============================================  RCC CR1 IWDG_CLK_SEL [0..0]  ============================================== */
typedef enum {                                  /*!< RCC_CR1_IWDG_CLK_SEL                                                      */
  RCC_CR1_IWDG_CLK_SEL_XO32K           = 0,     /*!< XO32K : XO32K is IWDG clock source                                        */
  RCC_CR1_IWDG_CLK_SEL_RCO32K          = 1,     /*!< RCO32K : RCO32K is IWDG clock source                                      */
} RCC_CR1_IWDG_CLK_SEL_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ============================================  RCC CR2 UART0_CLK_SEL [15..16]  ============================================= */
typedef enum {                                  /*!< RCC_CR2_UART0_CLK_SEL                                                     */
  RCC_CR2_UART0_CLK_SEL_PCLK0          = 0,     /*!< PCLK0 : PCLK0 is UART0 clock source                                       */
  RCC_CR2_UART0_CLK_SEL_RCO4M          = 1,     /*!< RCO4M : RCO4M is UART0 clock source                                       */
  RCC_CR2_UART0_CLK_SEL_XO32K          = 2,     /*!< XO32K : XO32K is UART0 clock source                                       */
  RCC_CR2_UART0_CLK_SEL_XO24M          = 3,     /*!< XO24M : XO24M is UART0 clock source                                       */
} RCC_CR2_UART0_CLK_SEL_Enum;

/* ============================================  RCC CR2 UART1_CLK_SEL [13..14]  ============================================= */
typedef enum {                                  /*!< RCC_CR2_UART1_CLK_SEL                                                     */
  RCC_CR2_UART1_CLK_SEL_PCLK0          = 0,     /*!< PCLK0 : PCLK0 is UART1 clock source                                       */
  RCC_CR2_UART1_CLK_SEL_RCO4M          = 1,     /*!< RCO4M : RCO4M is UART1 clock source                                       */
  RCC_CR2_UART1_CLK_SEL_XO32K          = 2,     /*!< XO32K : XO32K is UART1 clock source                                       */
  RCC_CR2_UART1_CLK_SEL_XO24M          = 3,     /*!< XO24M : XO24M is UART1 clock source                                       */
} RCC_CR2_UART1_CLK_SEL_Enum;

/* ============================================  RCC CR2 UART2_CLK_SEL [11..12]  ============================================= */
typedef enum {                                  /*!< RCC_CR2_UART2_CLK_SEL                                                     */
  RCC_CR2_UART2_CLK_SEL_PCLK1          = 0,     /*!< PCLK1 : PCLK1 is UART2 clock source                                       */
  RCC_CR2_UART2_CLK_SEL_RCO4M          = 1,     /*!< RCO4M : RCO4M is UART2 clock source                                       */
  RCC_CR2_UART2_CLK_SEL_XO32K          = 2,     /*!< XO32K : XO32K is UART2 clock source                                       */
  RCC_CR2_UART2_CLK_SEL_XO24M          = 3,     /*!< XO24M : XO24M is UART2 clock source                                       */
} RCC_CR2_UART2_CLK_SEL_Enum;

/* =============================================  RCC CR2 UART3_CLK_SEL [9..10]  ============================================= */
typedef enum {                                  /*!< RCC_CR2_UART3_CLK_SEL                                                     */
  RCC_CR2_UART3_CLK_SEL_PCLK1          = 0,     /*!< PCLK1 : PCLK1 is UART3 clock source                                       */
  RCC_CR2_UART3_CLK_SEL_RCO4M          = 1,     /*!< RCO4M : RCO4M is UART3 clock source                                       */
  RCC_CR2_UART3_CLK_SEL_XO32K          = 2,     /*!< XO32K : XO32K is UART3 clock source                                       */
  RCC_CR2_UART3_CLK_SEL_XO24M          = 3,     /*!< XO24M : XO24M is UART3 clock source                                       */
} RCC_CR2_UART3_CLK_SEL_Enum;

/* ==============================================  RCC CR2 SCC_CLK_SEL [7..8]  =============================================== */
typedef enum {                                  /*!< RCC_CR2_SCC_CLK_SEL                                                       */
  RCC_CR2_SCC_CLK_SEL_PCLK1            = 0,     /*!< PCLK1 : PCLK1 is SCC clock source                                         */
  RCC_CR2_SCC_CLK_SEL_SYSCLK           = 1,     /*!< SYSCLK : SYSCLK is SCC clock source                                       */
  RCC_CR2_SCC_CLK_SEL_PLL              = 2,     /*!< PLL : PLL is SCC clock source                                             */
  RCC_CR2_SCC_CLK_SEL_EXT              = 3,     /*!< EXT : EXT is SCC clock source                                             */
} RCC_CR2_SCC_CLK_SEL_Enum;

/* ==============================================  RCC CR2 ADC_CLK_SEL [5..6]  =============================================== */
typedef enum {                                  /*!< RCC_CR2_ADC_CLK_SEL                                                       */
  RCC_CR2_ADC_CLK_SEL_PCLK1            = 0,     /*!< PCLK1 : PCLK1 is ADC clock source                                         */
  RCC_CR2_ADC_CLK_SEL_SYSCLK           = 1,     /*!< SYSCLK : SYSCLK is ADC clock source                                       */
  RCC_CR2_ADC_CLK_SEL_PLL              = 2,     /*!< PLL : PLL is ADC clock source                                             */
  RCC_CR2_ADC_CLK_SEL_RCO48M           = 3,     /*!< RCO48M : RCO48M is ADC clock source                                       */
} RCC_CR2_ADC_CLK_SEL_Enum;

/* ==============================================  RCC CR2 I2S_CLK_SEL [2..4]  =============================================== */
typedef enum {                                  /*!< RCC_CR2_I2S_CLK_SEL                                                       */
  RCC_CR2_I2S_CLK_SEL_PCLK0            = 0,     /*!< PCLK0 : PCLK0 is I2S clock source                                         */
  RCC_CR2_I2S_CLK_SEL_XO24M            = 1,     /*!< XO24M : XO24M is I2S clock source                                         */
  RCC_CR2_I2S_CLK_SEL_PLL              = 2,     /*!< PLL : PLL is I2S clock source                                             */
  RCC_CR2_I2S_CLK_SEL_XO32M            = 3,     /*!< XO32M : XO32M is I2S clock source                                         */
  RCC_CR2_I2S_CLK_SEL_EXT              = 4,     /*!< EXT : EXT is I2S clock source                                             */
} RCC_CR2_I2S_CLK_SEL_Enum;

/* ==============================================  RCC CR2 QSPI_CLK_SEL [0..1]  ============================================== */
typedef enum {                                  /*!< RCC_CR2_QSPI_CLK_SEL                                                      */
  RCC_CR2_QSPI_CLK_SEL_HCLK            = 0,     /*!< HCLK : HCLK is QSPI clock source                                          */
  RCC_CR2_QSPI_CLK_SEL_SYSCLK          = 1,     /*!< SYSCLK : SYSCLK is QSPI clock source                                      */
  RCC_CR2_QSPI_CLK_SEL_PLL             = 2,     /*!< PLL : PLL is QSPI clock source                                            */
} RCC_CR2_QSPI_CLK_SEL_Enum;

/* =========================================================  CGR0  ========================================================== */
/* ===============================================  RCC CGR0 PWR_CLK [31..31]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_PWR_CLK                                                          */
  RCC_CGR0_PWR_CLK_DIS                 = 0,     /*!< DIS : PWR clock disable                                                   */
  RCC_CGR0_PWR_CLK_EN                  = 1,     /*!< EN : PWR clock enable                                                     */
} RCC_CGR0_PWR_CLK_Enum;

/* ==============================================  RCC CGR0 DMAC0_CLK [30..30]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_DMAC0_CLK                                                        */
  RCC_CGR0_DMAC0_CLK_DIS               = 0,     /*!< DIS : DMAC0 clock disable                                                 */
  RCC_CGR0_DMAC0_CLK_EN                = 1,     /*!< EN : DMAC0 clock enable                                                   */
} RCC_CGR0_DMAC0_CLK_Enum;

/* ==============================================  RCC CGR0 DMAC1_CLK [29..29]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_DMAC1_CLK                                                        */
  RCC_CGR0_DMAC1_CLK_DIS               = 0,     /*!< DIS : DMAC1 clock disable                                                 */
  RCC_CGR0_DMAC1_CLK_EN                = 1,     /*!< EN : DMAC1 clock enable                                                   */
} RCC_CGR0_DMAC1_CLK_Enum;

/* ===============================================  RCC CGR0 CRC_CLK [28..28]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_CRC_CLK                                                          */
  RCC_CGR0_CRC_CLK_DIS                 = 0,     /*!< DIS : CRC clock disable                                                   */
  RCC_CGR0_CRC_CLK_EN                  = 1,     /*!< EN : CRC clock enable                                                     */
} RCC_CGR0_CRC_CLK_Enum;

/* ============================================  RCC CGR0 BSTIMER0_CLK [27..27]  ============================================= */
typedef enum {                                  /*!< RCC_CGR0_BSTIMER0_CLK                                                     */
  RCC_CGR0_BSTIMER0_CLK_DIS            = 0,     /*!< DIS : BSTIMER0 clock disable                                              */
  RCC_CGR0_BSTIMER0_CLK_EN             = 1,     /*!< EN : BSTIMER0 clock enable                                                */
} RCC_CGR0_BSTIMER0_CLK_Enum;

/* ============================================  RCC CGR0 BSTIMER1_CLK [26..26]  ============================================= */
typedef enum {                                  /*!< RCC_CGR0_BSTIMER1_CLK                                                     */
  RCC_CGR0_BSTIMER1_CLK_DIS            = 0,     /*!< DIS : BSTIMER1 clock disable                                              */
  RCC_CGR0_BSTIMER1_CLK_EN             = 1,     /*!< EN : BSTIMER1 clock enable                                                */
} RCC_CGR0_BSTIMER1_CLK_Enum;

/* ==============================================  RCC CGR0 IOM0_CLK [25..25]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_IOM0_CLK                                                         */
  RCC_CGR0_IOM0_CLK_DIS                = 0,     /*!< DIS : IOM0 clock disable                                                  */
  RCC_CGR0_IOM0_CLK_EN                 = 1,     /*!< EN : IOM0 clock enable                                                    */
} RCC_CGR0_IOM0_CLK_Enum;

/* ==============================================  RCC CGR0 IOM1_CLK [24..24]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_IOM1_CLK                                                         */
  RCC_CGR0_IOM1_CLK_DIS                = 0,     /*!< DIS : IOM1 clock disable                                                  */
  RCC_CGR0_IOM1_CLK_EN                 = 1,     /*!< EN : IOM1 clock enable                                                    */
} RCC_CGR0_IOM1_CLK_Enum;

/* ==============================================  RCC CGR0 IOM2_CLK [23..23]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_IOM2_CLK                                                         */
  RCC_CGR0_IOM2_CLK_DIS                = 0,     /*!< DIS : IOM2 clock disable                                                  */
  RCC_CGR0_IOM2_CLK_EN                 = 1,     /*!< EN : IOM2 clock enable                                                    */
} RCC_CGR0_IOM2_CLK_Enum;

/* ==============================================  RCC CGR0 IOM3_CLK [22..22]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_IOM3_CLK                                                         */
  RCC_CGR0_IOM3_CLK_DIS                = 0,     /*!< DIS : IOM3 clock disable                                                  */
  RCC_CGR0_IOM3_CLK_EN                 = 1,     /*!< EN : IOM3 clock enable                                                    */
} RCC_CGR0_IOM3_CLK_Enum;

/* =============================================  RCC CGR0 SYSCFG_CLK [21..21]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_SYSCFG_CLK                                                       */
  RCC_CGR0_SYSCFG_CLK_DIS              = 0,     /*!< DIS : SYSCFG clock disable                                                */
  RCC_CGR0_SYSCFG_CLK_EN               = 1,     /*!< EN : SYSCFG clock enable                                                  */
} RCC_CGR0_SYSCFG_CLK_Enum;

/* ==============================================  RCC CGR0 UART0_CLK [20..20]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_UART0_CLK                                                        */
  RCC_CGR0_UART0_CLK_DIS               = 0,     /*!< DIS : UART0 clock disable                                                 */
  RCC_CGR0_UART0_CLK_EN                = 1,     /*!< EN : UART0 clock enable                                                   */
} RCC_CGR0_UART0_CLK_Enum;

/* ==============================================  RCC CGR0 UART1_CLK [19..19]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_UART1_CLK                                                        */
  RCC_CGR0_UART1_CLK_DIS               = 0,     /*!< DIS : UART1 clock disable                                                 */
  RCC_CGR0_UART1_CLK_EN                = 1,     /*!< EN : UART1 clock enable                                                   */
} RCC_CGR0_UART1_CLK_Enum;

/* ==============================================  RCC CGR0 UART2_CLK [18..18]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_UART2_CLK                                                        */
  RCC_CGR0_UART2_CLK_DIS               = 0,     /*!< DIS : UART2 clock disable                                                 */
  RCC_CGR0_UART2_CLK_EN                = 1,     /*!< EN : UART2 clock enable                                                   */
} RCC_CGR0_UART2_CLK_Enum;

/* ==============================================  RCC CGR0 UART3_CLK [17..17]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_UART3_CLK                                                        */
  RCC_CGR0_UART3_CLK_DIS               = 0,     /*!< DIS : UART3 clock disable                                                 */
  RCC_CGR0_UART3_CLK_EN                = 1,     /*!< EN : UART3 clock enable                                                   */
} RCC_CGR0_UART3_CLK_Enum;

/* =============================================  RCC CGR0 LPUART_CLK [16..16]  ============================================== */
typedef enum {                                  /*!< RCC_CGR0_LPUART_CLK                                                       */
  RCC_CGR0_LPUART_CLK_DIS              = 0,     /*!< DIS : LPUART clock disable                                                */
  RCC_CGR0_LPUART_CLK_EN               = 1,     /*!< EN : LPUART clock enable                                                  */
} RCC_CGR0_LPUART_CLK_Enum;

/* ==============================================  RCC CGR0 SSP0_CLK [15..15]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_SSP0_CLK                                                         */
  RCC_CGR0_SSP0_CLK_DIS                = 0,     /*!< DIS : SSP0 clock disable                                                  */
  RCC_CGR0_SSP0_CLK_EN                 = 1,     /*!< EN : SSP0 clock enable                                                    */
} RCC_CGR0_SSP0_CLK_Enum;

/* ==============================================  RCC CGR0 SSP1_CLK [14..14]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_SSP1_CLK                                                         */
  RCC_CGR0_SSP1_CLK_DIS                = 0,     /*!< DIS : SSP1 clock disable                                                  */
  RCC_CGR0_SSP1_CLK_EN                 = 1,     /*!< EN : SSP1 clock enable                                                    */
} RCC_CGR0_SSP1_CLK_Enum;

/* ==============================================  RCC CGR0 SSP2_CLK [13..13]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_SSP2_CLK                                                         */
  RCC_CGR0_SSP2_CLK_DIS                = 0,     /*!< DIS : SSP2 clock disable                                                  */
  RCC_CGR0_SSP2_CLK_EN                 = 1,     /*!< EN : SSP2 clock enable                                                    */
} RCC_CGR0_SSP2_CLK_Enum;

/* ==============================================  RCC CGR0 I2C0_CLK [12..12]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_I2C0_CLK                                                         */
  RCC_CGR0_I2C0_CLK_DIS                = 0,     /*!< DIS : I2C0 clock disable                                                  */
  RCC_CGR0_I2C0_CLK_EN                 = 1,     /*!< EN : I2C0 clock enable                                                    */
} RCC_CGR0_I2C0_CLK_Enum;

/* ==============================================  RCC CGR0 I2C1_CLK [11..11]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_I2C1_CLK                                                         */
  RCC_CGR0_I2C1_CLK_DIS                = 0,     /*!< DIS : I2C1 clock disable                                                  */
  RCC_CGR0_I2C1_CLK_EN                 = 1,     /*!< EN : I2C1 clock enable                                                    */
} RCC_CGR0_I2C1_CLK_Enum;

/* ==============================================  RCC CGR0 I2C2_CLK [10..10]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_I2C2_CLK                                                         */
  RCC_CGR0_I2C2_CLK_DIS                = 0,     /*!< DIS : I2C2 clock disable                                                  */
  RCC_CGR0_I2C2_CLK_EN                 = 1,     /*!< EN : I2C2 clock enable                                                    */
} RCC_CGR0_I2C2_CLK_Enum;

/* ================================================  RCC CGR0 SCC_CLK [9..9]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_SCC_CLK                                                          */
  RCC_CGR0_SCC_CLK_DIS                 = 0,     /*!< DIS : SCC clock disable                                                   */
  RCC_CGR0_SCC_CLK_EN                  = 1,     /*!< EN : SCC clock enable                                                     */
} RCC_CGR0_SCC_CLK_Enum;

/* ================================================  RCC CGR0 ADC_CLK [8..8]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_ADC_CLK                                                          */
  RCC_CGR0_ADC_CLK_DIS                 = 0,     /*!< DIS : ADC clock disable                                                   */
  RCC_CGR0_ADC_CLK_EN                  = 1,     /*!< EN : ADC clock enable                                                     */
} RCC_CGR0_ADC_CLK_Enum;

/* ===============================================  RCC CGR0 AFEC_CLK [7..7]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_AFEC_CLK                                                         */
  RCC_CGR0_AFEC_CLK_DIS                = 0,     /*!< DIS : AFEC clock disable                                                  */
  RCC_CGR0_AFEC_CLK_EN                 = 1,     /*!< EN : AFEC clock enable                                                    */
} RCC_CGR0_AFEC_CLK_Enum;

/* ================================================  RCC CGR0 LCD_CLK [6..6]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_LCD_CLK                                                          */
  RCC_CGR0_LCD_CLK_DIS                 = 0,     /*!< DIS : LCD clock disable                                                   */
  RCC_CGR0_LCD_CLK_EN                  = 1,     /*!< EN : LCD clock enable                                                     */
} RCC_CGR0_LCD_CLK_Enum;

/* ================================================  RCC CGR0 DAC_CLK [5..5]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_DAC_CLK                                                          */
  RCC_CGR0_DAC_CLK_DIS                 = 0,     /*!< DIS : DAC clock disable                                                   */
  RCC_CGR0_DAC_CLK_EN                  = 1,     /*!< EN : DAC clock enable                                                     */
} RCC_CGR0_DAC_CLK_Enum;

/* ===============================================  RCC CGR0 LORA_CLK [4..4]  ================================================ */
typedef enum {                                  /*!< RCC_CGR0_LORA_CLK                                                         */
  RCC_CGR0_LORA_CLK_DIS                = 0,     /*!< DIS : LORA clock disable                                                  */
  RCC_CGR0_LORA_CLK_EN                 = 1,     /*!< EN : LORA clock enable                                                    */
} RCC_CGR0_LORA_CLK_Enum;

/* ==============================================  RCC CGR0 TIMER0_CLK [3..3]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_TIMER0_CLK                                                       */
  RCC_CGR0_TIMER0_CLK_DIS              = 0,     /*!< DIS : TIMER0 clock disable                                                */
  RCC_CGR0_TIMER0_CLK_EN               = 1,     /*!< EN : TIMER0 clock enable                                                  */
} RCC_CGR0_TIMER0_CLK_Enum;

/* ==============================================  RCC CGR0 TIMER1_CLK [2..2]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_TIMER1_CLK                                                       */
  RCC_CGR0_TIMER1_CLK_DIS              = 0,     /*!< DIS : TIMER1 clock disable                                                */
  RCC_CGR0_TIMER1_CLK_EN               = 1,     /*!< EN : TIMER1 clock enable                                                  */
} RCC_CGR0_TIMER1_CLK_Enum;

/* ==============================================  RCC CGR0 TIMER2_CLK [1..1]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_TIMER2_CLK                                                       */
  RCC_CGR0_TIMER2_CLK_DIS              = 0,     /*!< DIS : TIMER2 clock disable                                                */
  RCC_CGR0_TIMER2_CLK_EN               = 1,     /*!< EN : TIMER2 clock enable                                                  */
} RCC_CGR0_TIMER2_CLK_Enum;

/* ==============================================  RCC CGR0 TIMER3_CLK [0..0]  =============================================== */
typedef enum {                                  /*!< RCC_CGR0_TIMER3_CLK                                                       */
  RCC_CGR0_TIMER3_CLK_DIS              = 0,     /*!< DIS : TIMER3 clock disable                                                */
  RCC_CGR0_TIMER3_CLK_EN               = 1,     /*!< EN : TIMER3 clock enable                                                  */
} RCC_CGR0_TIMER3_CLK_Enum;

/* =========================================================  CGR1  ========================================================== */
/* ============================================  RCC CGR1 LPTIMER1_PCLK [12..12]  ============================================ */
typedef enum {                                  /*!< RCC_CGR1_LPTIMER1_PCLK                                                    */
  RCC_CGR1_LPTIMER1_PCLK_DIS           = 0,     /*!< DIS : LPTIMER1 PCLK clock disable                                         */
  RCC_CGR1_LPTIMER1_PCLK_EN            = 1,     /*!< EN : LPTIMER1 PCLK clock enable                                           */
} RCC_CGR1_LPTIMER1_PCLK_Enum;

/* ============================================  RCC CGR1 LPTIMER1_CLK [11..11]  ============================================= */
typedef enum {                                  /*!< RCC_CGR1_LPTIMER1_CLK                                                     */
  RCC_CGR1_LPTIMER1_CLK_DIS            = 0,     /*!< DIS : LPTIMER1 clock disable                                              */
  RCC_CGR1_LPTIMER1_CLK_EN             = 1,     /*!< EN : LPTIMER1 clock enable                                                */
} RCC_CGR1_LPTIMER1_CLK_Enum;

/* ==============================================  RCC CGR1 RNGC_CLK [10..10]  =============================================== */
typedef enum {                                  /*!< RCC_CGR1_RNGC_CLK                                                         */
  RCC_CGR1_RNGC_CLK_DIS                = 0,     /*!< DIS : RNGC clock disable                                                  */
  RCC_CGR1_RNGC_CLK_EN                 = 1,     /*!< EN : RNGC clock enable                                                    */
} RCC_CGR1_RNGC_CLK_Enum;

/* =============================================  RCC CGR1 LPTIMER0_PCLK [9..9]  ============================================= */
typedef enum {                                  /*!< RCC_CGR1_LPTIMER0_PCLK                                                    */
  RCC_CGR1_LPTIMER0_PCLK_DIS           = 0,     /*!< DIS : LPTIMER0 PCLK clock disable                                         */
  RCC_CGR1_LPTIMER0_PCLK_EN            = 1,     /*!< EN : LPTIMER0 PCLK clock enable                                           */
} RCC_CGR1_LPTIMER0_PCLK_Enum;

/* ================================================  RCC CGR1 I2S_CLK [8..8]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_I2S_CLK                                                          */
  RCC_CGR1_I2S_CLK_DIS                 = 0,     /*!< DIS : I2S clock disable                                                   */
  RCC_CGR1_I2S_CLK_EN                  = 1,     /*!< EN : I2S clock enable                                                     */
} RCC_CGR1_I2S_CLK_Enum;

/* ================================================  RCC CGR1 SAC_CLK [7..7]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_SAC_CLK                                                          */
  RCC_CGR1_SAC_CLK_DIS                 = 0,     /*!< DIS : SAC clock disable                                                   */
  RCC_CGR1_SAC_CLK_EN                  = 1,     /*!< EN : SAC clock enable                                                     */
} RCC_CGR1_SAC_CLK_Enum;

/* ==============================================  RCC CGR1 WDG_CNT_CLK [6..6]  ============================================== */
typedef enum {                                  /*!< RCC_CGR1_WDG_CNT_CLK                                                      */
  RCC_CGR1_WDG_CNT_CLK_DIS             = 0,     /*!< DIS : WDG_CNT clock disable                                               */
  RCC_CGR1_WDG_CNT_CLK_EN              = 1,     /*!< EN : WDG_CNT clock enable                                                 */
} RCC_CGR1_WDG_CNT_CLK_Enum;

/* ===============================================  RCC CGR1 QSPI_CLK [5..5]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_QSPI_CLK                                                         */
  RCC_CGR1_QSPI_CLK_DIS                = 0,     /*!< DIS : QSPI clock disable                                                  */
  RCC_CGR1_QSPI_CLK_EN                 = 1,     /*!< EN : QSPI clock enable                                                    */
} RCC_CGR1_QSPI_CLK_Enum;

/* =============================================  RCC CGR1 LPTIMER0_CLK [4..4]  ============================================== */
typedef enum {                                  /*!< RCC_CGR1_LPTIMER0_CLK                                                     */
  RCC_CGR1_LPTIMER0_CLK_DIS            = 0,     /*!< DIS : LPTIMER0 clock disable                                              */
  RCC_CGR1_LPTIMER0_CLK_EN             = 1,     /*!< EN : LPTIMER0 clock enable                                                */
} RCC_CGR1_LPTIMER0_CLK_Enum;

/* ===============================================  RCC CGR1 IWDG_CLK [3..3]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_IWDG_CLK                                                         */
  RCC_CGR1_IWDG_CLK_DIS                = 0,     /*!< DIS : IWDG clock disable                                                  */
  RCC_CGR1_IWDG_CLK_EN                 = 1,     /*!< EN : IWDG clock enable                                                    */
} RCC_CGR1_IWDG_CLK_Enum;

/* ================================================  RCC CGR1 WDG_CLK [2..2]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_WDG_CLK                                                          */
  RCC_CGR1_WDG_CLK_DIS                 = 0,     /*!< DIS : WDG clock disable                                                   */
  RCC_CGR1_WDG_CLK_EN                  = 1,     /*!< EN : WDG clock enable                                                     */
} RCC_CGR1_WDG_CLK_Enum;

/* ================================================  RCC CGR1 RTC_CLK [1..1]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_RTC_CLK                                                          */
  RCC_CGR1_RTC_CLK_DIS                 = 0,     /*!< DIS : RTC clock disable                                                   */
  RCC_CGR1_RTC_CLK_EN                  = 1,     /*!< EN : RTC clock enable                                                     */
} RCC_CGR1_RTC_CLK_Enum;

/* ================================================  RCC CGR1 SEC_CLK [0..0]  ================================================ */
typedef enum {                                  /*!< RCC_CGR1_SEC_CLK                                                          */
  RCC_CGR1_SEC_CLK_DIS                 = 0,     /*!< DIS : SEC clock disable                                                   */
  RCC_CGR1_SEC_CLK_EN                  = 1,     /*!< EN : SEC clock enable                                                     */
} RCC_CGR1_SEC_CLK_Enum;

/* =========================================================  CGR2  ========================================================== */
/* ===========================================  RCC CGR2 LPTIMER1_AON_CLK [5..5]  ============================================ */
typedef enum {                                  /*!< RCC_CGR2_LPTIMER1_AON_CLK                                                 */
  RCC_CGR2_LPTIMER1_AON_CLK_DIS        = 0,     /*!< DIS : LPTIMER1 AON clock disable                                          */
  RCC_CGR2_LPTIMER1_AON_CLK_EN         = 1,     /*!< EN : LPTIMER1 AON clock enable                                            */
} RCC_CGR2_LPTIMER1_AON_CLK_Enum;

/* ===========================================  RCC CGR2 LPTIMER0_AON_CLK [4..4]  ============================================ */
typedef enum {                                  /*!< RCC_CGR2_LPTIMER0_AON_CLK                                                 */
  RCC_CGR2_LPTIMER0_AON_CLK_DIS        = 0,     /*!< DIS : LPTIMER0 AON clock disable                                          */
  RCC_CGR2_LPTIMER0_AON_CLK_EN         = 1,     /*!< EN : LPTIMER0 AON clock enable                                            */
} RCC_CGR2_LPTIMER0_AON_CLK_Enum;

/* ==============================================  RCC CGR2 LCD_AON_CLK [3..3]  ============================================== */
typedef enum {                                  /*!< RCC_CGR2_LCD_AON_CLK                                                      */
  RCC_CGR2_LCD_AON_CLK_DIS             = 0,     /*!< DIS : LCD AON clock disable                                               */
  RCC_CGR2_LCD_AON_CLK_EN              = 1,     /*!< EN : LCD AON clock enable                                                 */
} RCC_CGR2_LCD_AON_CLK_Enum;

/* ============================================  RCC CGR2 LPUART_AON_CLK [2..2]  ============================================= */
typedef enum {                                  /*!< RCC_CGR2_LPUART_AON_CLK                                                   */
  RCC_CGR2_LPUART_AON_CLK_DIS          = 0,     /*!< DIS : LPUART AON clock disable                                            */
  RCC_CGR2_LPUART_AON_CLK_EN           = 1,     /*!< EN : LPUART AON clock enable                                              */
} RCC_CGR2_LPUART_AON_CLK_Enum;

/* ==============================================  RCC CGR2 RTC_AON_CLK [1..1]  ============================================== */
typedef enum {                                  /*!< RCC_CGR2_RTC_AON_CLK                                                      */
  RCC_CGR2_RTC_AON_CLK_DIS             = 0,     /*!< DIS : RTC AON clock disable                                               */
  RCC_CGR2_RTC_AON_CLK_EN              = 1,     /*!< EN : RTC AON clock enable                                                 */
} RCC_CGR2_RTC_AON_CLK_Enum;

/* =============================================  RCC CGR2 IWDG_AON_CLK [0..0]  ============================================== */
typedef enum {                                  /*!< RCC_CGR2_IWDG_AON_CLK                                                     */
  RCC_CGR2_IWDG_AON_CLK_DIS            = 0,     /*!< DIS : IWDG AON clock disable                                              */
  RCC_CGR2_IWDG_AON_CLK_EN             = 1,     /*!< EN : IWDG AON clock enable                                                */
} RCC_CGR2_IWDG_AON_CLK_Enum;

/* =========================================================  RST0  ========================================================== */
/* ==============================================  RCC RST0 UART0_RST [31..31]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_UART0_RST                                                        */
  RCC_RST0_UART0_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_UART0_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_UART0_RST_Enum;

/* ==============================================  RCC RST0 UART1_RST [30..30]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_UART1_RST                                                        */
  RCC_RST0_UART1_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_UART1_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_UART1_RST_Enum;

/* ==============================================  RCC RST0 UART2_RST [29..29]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_UART2_RST                                                        */
  RCC_RST0_UART2_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_UART2_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_UART2_RST_Enum;

/* ==============================================  RCC RST0 UART3_RST [28..28]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_UART3_RST                                                        */
  RCC_RST0_UART3_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_UART3_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_UART3_RST_Enum;

/* =============================================  RCC RST0 LPUART_RST [27..27]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_LPUART_RST                                                       */
  RCC_RST0_LPUART_RST_CLR_FLAG         = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_LPUART_RST_SET_FLAG         = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_LPUART_RST_Enum;

/* ==============================================  RCC RST0 SSP0_RST [26..26]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_SSP0_RST                                                         */
  RCC_RST0_SSP0_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SSP0_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SSP0_RST_Enum;

/* ==============================================  RCC RST0 SSP1_RST [25..25]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_SSP1_RST                                                         */
  RCC_RST0_SSP1_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SSP1_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SSP1_RST_Enum;

/* ==============================================  RCC RST0 SSP2_RST [24..24]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_SSP2_RST                                                         */
  RCC_RST0_SSP2_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SSP2_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SSP2_RST_Enum;

/* ==============================================  RCC RST0 QSPI_RST [23..23]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_QSPI_RST                                                         */
  RCC_RST0_QSPI_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_QSPI_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_QSPI_RST_Enum;

/* ==============================================  RCC RST0 I2C0_RST [22..22]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_I2C0_RST                                                         */
  RCC_RST0_I2C0_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_I2C0_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_I2C0_RST_Enum;

/* ==============================================  RCC RST0 I2C1_RST [21..21]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_I2C1_RST                                                         */
  RCC_RST0_I2C1_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_I2C1_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_I2C1_RST_Enum;

/* ==============================================  RCC RST0 I2C2_RST [20..20]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_I2C2_RST                                                         */
  RCC_RST0_I2C2_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_I2C2_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_I2C2_RST_Enum;

/* ===============================================  RCC RST0 SCC_RST [19..19]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_SCC_RST                                                          */
  RCC_RST0_SCC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SCC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SCC_RST_Enum;

/* ===============================================  RCC RST0 ADC_RST [18..18]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_ADC_RST                                                          */
  RCC_RST0_ADC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_ADC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_ADC_RST_Enum;

/* ==============================================  RCC RST0 AFEC_RST [17..17]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_AFEC_RST                                                         */
  RCC_RST0_AFEC_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_AFEC_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_AFEC_RST_Enum;

/* ===============================================  RCC RST0 LCD_RST [16..16]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_LCD_RST                                                          */
  RCC_RST0_LCD_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_LCD_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_LCD_RST_Enum;

/* ===============================================  RCC RST0 DAC_RST [15..15]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_DAC_RST                                                          */
  RCC_RST0_DAC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_DAC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_DAC_RST_Enum;

/* ==============================================  RCC RST0 LORA_RST [14..14]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_LORA_RST                                                         */
  RCC_RST0_LORA_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_LORA_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_LORA_RST_Enum;

/* ===============================================  RCC RST0 IOM_RST [13..13]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_IOM_RST                                                          */
  RCC_RST0_IOM_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_IOM_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_IOM_RST_Enum;

/* =============================================  RCC RST0 TIMER0_RST [12..12]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_TIMER0_RST                                                       */
  RCC_RST0_TIMER0_RST_CLR_FLAG         = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_TIMER0_RST_SET_FLAG         = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_TIMER0_RST_Enum;

/* =============================================  RCC RST0 TIMER1_RST [11..11]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_TIMER1_RST                                                       */
  RCC_RST0_TIMER1_RST_CLR_FLAG         = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_TIMER1_RST_SET_FLAG         = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_TIMER1_RST_Enum;

/* =============================================  RCC RST0 TIMER2_RST [10..10]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_TIMER2_RST                                                       */
  RCC_RST0_TIMER2_RST_CLR_FLAG         = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_TIMER2_RST_SET_FLAG         = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_TIMER2_RST_Enum;

/* ==============================================  RCC RST0 TIMER3_RST [9..9]  =============================================== */
typedef enum {                                  /*!< RCC_RST0_TIMER3_RST                                                       */
  RCC_RST0_TIMER3_RST_CLR_FLAG         = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_TIMER3_RST_SET_FLAG         = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_TIMER3_RST_Enum;

/* =============================================  RCC RST0 BSTIMER0_RST [8..8]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_BSTIMER0_RST                                                     */
  RCC_RST0_BSTIMER0_RST_CLR_FLAG       = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_BSTIMER0_RST_SET_FLAG       = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_BSTIMER0_RST_Enum;

/* =============================================  RCC RST0 BSTIMER1_RST [7..7]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_BSTIMER1_RST                                                     */
  RCC_RST0_BSTIMER1_RST_CLR_FLAG       = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_BSTIMER1_RST_SET_FLAG       = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_BSTIMER1_RST_Enum;

/* =============================================  RCC RST0 LPTIMER0_RST [6..6]  ============================================== */
typedef enum {                                  /*!< RCC_RST0_LPTIMER0_RST                                                     */
  RCC_RST0_LPTIMER0_RST_CLR_FLAG       = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_LPTIMER0_RST_SET_FLAG       = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_LPTIMER0_RST_Enum;

/* ===============================================  RCC RST0 IWDG_RST [5..5]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_IWDG_RST                                                         */
  RCC_RST0_IWDG_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_IWDG_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_IWDG_RST_Enum;

/* ================================================  RCC RST0 WDG_RST [4..4]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_WDG_RST                                                          */
  RCC_RST0_WDG_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_WDG_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_WDG_RST_Enum;

/* ================================================  RCC RST0 RTC_RST [3..3]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_RTC_RST                                                          */
  RCC_RST0_RTC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_RTC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_RTC_RST_Enum;

/* ================================================  RCC RST0 CRC_RST [2..2]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_CRC_RST                                                          */
  RCC_RST0_CRC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_CRC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_CRC_RST_Enum;

/* ================================================  RCC RST0 SEC_RST [1..1]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_SEC_RST                                                          */
  RCC_RST0_SEC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SEC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SEC_RST_Enum;

/* ================================================  RCC RST0 SAC_RST [0..0]  ================================================ */
typedef enum {                                  /*!< RCC_RST0_SAC_RST                                                          */
  RCC_RST0_SAC_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST0_SAC_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST0_SAC_RST_Enum;

/* =========================================================  RST1  ========================================================== */
/* ===========================================  RCC RST1 IWDG_RESET_REQ_EN [4..4]  =========================================== */
typedef enum {                                  /*!< RCC_RST1_IWDG_RESET_REQ_EN                                                */
  RCC_RST1_IWDG_RESET_REQ_EN_CLR_FLAG  = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST1_IWDG_RESET_REQ_EN_SET_FLAG  = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST1_IWDG_RESET_REQ_EN_Enum;

/* ===============================================  RCC RST1 RNGC_RST [3..3]  ================================================ */
typedef enum {                                  /*!< RCC_RST1_RNGC_RST                                                         */
  RCC_RST1_RNGC_RST_CLR_FLAG           = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST1_RNGC_RST_SET_FLAG           = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST1_RNGC_RST_Enum;

/* ================================================  RCC RST1 I2S_RST [2..2]  ================================================ */
typedef enum {                                  /*!< RCC_RST1_I2S_RST                                                          */
  RCC_RST1_I2S_RST_CLR_FLAG            = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST1_I2S_RST_SET_FLAG            = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST1_I2S_RST_Enum;

/* ===============================================  RCC RST1 DMAC0_RST [1..1]  =============================================== */
typedef enum {                                  /*!< RCC_RST1_DMAC0_RST                                                        */
  RCC_RST1_DMAC0_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST1_DMAC0_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST1_DMAC0_RST_Enum;

/* ===============================================  RCC RST1 DMAC1_RST [0..0]  =============================================== */
typedef enum {                                  /*!< RCC_RST1_DMAC1_RST                                                        */
  RCC_RST1_DMAC1_RST_CLR_FLAG          = 0,     /*!< CLR_FLAG : Reset state                                                    */
  RCC_RST1_DMAC1_RST_SET_FLAG          = 1,     /*!< SET_FLAG : Working state                                                  */
} RCC_RST1_DMAC1_RST_Enum;

/* ========================================================  RST_SR  ========================================================= */
/* ==============================================  RCC RST_SR BOR_RESET [6..6]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_BOR_RESET                                                      */
  RCC_RST_SR_BOR_RESET_CLR_FLAG        = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_BOR_RESET_SET_FLAG        = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_BOR_RESET_Enum;

/* =============================================  RCC RST_SR IWDG_RESET [5..5]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_IWDG_RESET                                                     */
  RCC_RST_SR_IWDG_RESET_CLR_FLAG       = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_IWDG_RESET_SET_FLAG       = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_IWDG_RESET_Enum;

/* ==============================================  RCC RST_SR WDG_RESET [4..4]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_WDG_RESET                                                      */
  RCC_RST_SR_WDG_RESET_CLR_FLAG        = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_WDG_RESET_SET_FLAG        = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_WDG_RESET_Enum;

/* ==============================================  RCC RST_SR EFC_RESET [3..3]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_EFC_RESET                                                      */
  RCC_RST_SR_EFC_RESET_CLR_FLAG        = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_EFC_RESET_SET_FLAG        = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_EFC_RESET_Enum;

/* ==============================================  RCC RST_SR CPU_RESET [2..2]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_CPU_RESET                                                      */
  RCC_RST_SR_CPU_RESET_CLR_FLAG        = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_CPU_RESET_SET_FLAG        = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_CPU_RESET_Enum;

/* ==============================================  RCC RST_SR SEC_RESET [1..1]  ============================================== */
typedef enum {                                  /*!< RCC_RST_SR_SEC_RESET                                                      */
  RCC_RST_SR_SEC_RESET_CLR_FLAG        = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_SEC_RESET_SET_FLAG        = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_SEC_RESET_Enum;

/* ============================================  RCC RST_SR STANDBY_RESET [0..0]  ============================================ */
typedef enum {                                  /*!< RCC_RST_SR_STANDBY_RESET                                                  */
  RCC_RST_SR_STANDBY_RESET_CLR_FLAG    = 0,     /*!< CLR_FLAG : Not detected                                                   */
  RCC_RST_SR_STANDBY_RESET_SET_FLAG    = 1,     /*!< SET_FLAG : Detected                                                       */
} RCC_RST_SR_STANDBY_RESET_Enum;

/* ========================================================  RST_CR  ========================================================= */
/* ===========================================  RCC RST_CR IWDG_RESET_REQ [5..5]  ============================================ */
typedef enum {                                  /*!< RCC_RST_CR_IWDG_RESET_REQ                                                 */
  RCC_RST_CR_IWDG_RESET_REQ_DIS        = 0,     /*!< DIS : IWDG reset request disable                                          */
  RCC_RST_CR_IWDG_RESET_REQ_SET_FLAG   = 1,     /*!< SET_FLAG : IWDG reset request enable                                      */
} RCC_RST_CR_IWDG_RESET_REQ_Enum;

/* ============================================  RCC RST_CR WDG_RESET_REQ [4..4]  ============================================ */
typedef enum {                                  /*!< RCC_RST_CR_WDG_RESET_REQ                                                  */
  RCC_RST_CR_WDG_RESET_REQ_DIS         = 0,     /*!< DIS : WDG reset request disable                                           */
  RCC_RST_CR_WDG_RESET_REQ_SET_FLAG    = 1,     /*!< SET_FLAG : WDG reset request enable                                       */
} RCC_RST_CR_WDG_RESET_REQ_Enum;

/* ============================================  RCC RST_CR EFC_RESET_REQ [3..3]  ============================================ */
typedef enum {                                  /*!< RCC_RST_CR_EFC_RESET_REQ                                                  */
  RCC_RST_CR_EFC_RESET_REQ_DIS         = 0,     /*!< DIS : EFC reset request disable                                           */
  RCC_RST_CR_EFC_RESET_REQ_SET_FLAG    = 1,     /*!< SET_FLAG : EFC reset request enable                                       */
} RCC_RST_CR_EFC_RESET_REQ_Enum;

/* ============================================  RCC RST_CR CPU_RESET_REQ [2..2]  ============================================ */
typedef enum {                                  /*!< RCC_RST_CR_CPU_RESET_REQ                                                  */
  RCC_RST_CR_CPU_RESET_REQ_DIS         = 0,     /*!< DIS : CPU reset request disable                                           */
  RCC_RST_CR_CPU_RESET_REQ_SET_FLAG    = 1,     /*!< SET_FLAG : CPU reset request enable                                       */
} RCC_RST_CR_CPU_RESET_REQ_Enum;

/* ============================================  RCC RST_CR SEC_RESET_REQ [1..1]  ============================================ */
typedef enum {                                  /*!< RCC_RST_CR_SEC_RESET_REQ                                                  */
  RCC_RST_CR_SEC_RESET_REQ_DIS         = 0,     /*!< DIS : SEC reset request disable                                           */
  RCC_RST_CR_SEC_RESET_REQ_SET_FLAG    = 1,     /*!< SET_FLAG : SEC reset request enable                                       */
} RCC_RST_CR_SEC_RESET_REQ_Enum;

/* ==========================================================  SR  =========================================================== */
/* ========================================  RCC SR LPTIMER1_AON_CLK_EN_DONE [5..5]  ========================================= */
typedef enum {                                  /*!< RCC_SR_LPTIMER1_AON_CLK_EN_DONE                                           */
  RCC_SR_LPTIMER1_AON_CLK_EN_DONE_CLR_FLAG = 0, /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_LPTIMER1_AON_CLK_EN_DONE_SET_FLAG = 1, /*!< SET_FLAG : Done                                                           */
} RCC_SR_LPTIMER1_AON_CLK_EN_DONE_Enum;

/* ========================================  RCC SR LPTIMER0_AON_CLK_EN_DONE [4..4]  ========================================= */
typedef enum {                                  /*!< RCC_SR_LPTIMER0_AON_CLK_EN_DONE                                           */
  RCC_SR_LPTIMER0_AON_CLK_EN_DONE_CLR_FLAG = 0, /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_LPTIMER0_AON_CLK_EN_DONE_SET_FLAG = 1, /*!< SET_FLAG : Done                                                           */
} RCC_SR_LPTIMER0_AON_CLK_EN_DONE_Enum;

/* ===========================================  RCC SR LCD_AON_CLK_EN_DONE [3..3]  =========================================== */
typedef enum {                                  /*!< RCC_SR_LCD_AON_CLK_EN_DONE                                                */
  RCC_SR_LCD_AON_CLK_EN_DONE_CLR_FLAG  = 0,     /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_LCD_AON_CLK_EN_DONE_SET_FLAG  = 1,     /*!< SET_FLAG : Done                                                           */
} RCC_SR_LCD_AON_CLK_EN_DONE_Enum;

/* =========================================  RCC SR LPUART_AON_CLK_EN_DONE [2..2]  ========================================== */
typedef enum {                                  /*!< RCC_SR_LPUART_AON_CLK_EN_DONE                                             */
  RCC_SR_LPUART_AON_CLK_EN_DONE_CLR_FLAG = 0,   /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_LPUART_AON_CLK_EN_DONE_SET_FLAG = 1,   /*!< SET_FLAG : Done                                                           */
} RCC_SR_LPUART_AON_CLK_EN_DONE_Enum;

/* ===========================================  RCC SR RTC_AON_CLK_EN_DONE [1..1]  =========================================== */
typedef enum {                                  /*!< RCC_SR_RTC_AON_CLK_EN_DONE                                                */
  RCC_SR_RTC_AON_CLK_EN_DONE_CLR_FLAG  = 0,     /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_RTC_AON_CLK_EN_DONE_SET_FLAG  = 1,     /*!< SET_FLAG : Done                                                           */
} RCC_SR_RTC_AON_CLK_EN_DONE_Enum;

/* ==========================================  RCC SR IWDG_AON_CLK_EN_DONE [0..0]  =========================================== */
typedef enum {                                  /*!< RCC_SR_IWDG_AON_CLK_EN_DONE                                               */
  RCC_SR_IWDG_AON_CLK_EN_DONE_CLR_FLAG = 0,     /*!< CLR_FLAG : Not done                                                       */
  RCC_SR_IWDG_AON_CLK_EN_DONE_SET_FLAG = 1,     /*!< SET_FLAG : Done                                                           */
} RCC_SR_IWDG_AON_CLK_EN_DONE_Enum;

/* ==========================================================  SR1  ========================================================== */
/* =========================================  RCC SR1 LPTIMER1_CLK_EN_SYNC [20..20]  ========================================= */
typedef enum {                                  /*!< RCC_SR1_LPTIMER1_CLK_EN_SYNC                                              */
  RCC_SR1_LPTIMER1_CLK_EN_SYNC_CLR_FLAG = 0,    /*!< CLR_FLAG : LPTIMER1 clock not synchronized                                */
  RCC_SR1_LPTIMER1_CLK_EN_SYNC_SET_FLAG = 1,    /*!< SET_FLAG : LPTIMER1 clock synchronized                                    */
} RCC_SR1_LPTIMER1_CLK_EN_SYNC_Enum;

/* =======================================  RCC SR1 LPTIMER1_AON_CLK_EN_SYNC [19..19]  ======================================= */
typedef enum {                                  /*!< RCC_SR1_LPTIMER1_AON_CLK_EN_SYNC                                          */
  RCC_SR1_LPTIMER1_AON_CLK_EN_SYNC_CLR_FLAG = 0,/*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LPTIMER1_AON_CLK_EN_SYNC_SET_FLAG = 1,/*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LPTIMER1_AON_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 UART0_CLK_EN_SYNC [18..18]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_UART0_CLK_EN_SYNC                                                 */
  RCC_SR1_UART0_CLK_EN_SYNC_CLR_FLAG   = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_UART0_CLK_EN_SYNC_SET_FLAG   = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_UART0_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 UART1_CLK_EN_SYNC [17..17]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_UART1_CLK_EN_SYNC                                                 */
  RCC_SR1_UART1_CLK_EN_SYNC_CLR_FLAG   = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_UART1_CLK_EN_SYNC_SET_FLAG   = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_UART1_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 UART2_CLK_EN_SYNC [16..16]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_UART2_CLK_EN_SYNC                                                 */
  RCC_SR1_UART2_CLK_EN_SYNC_CLR_FLAG   = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_UART2_CLK_EN_SYNC_SET_FLAG   = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_UART2_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 UART3_CLK_EN_SYNC [15..15]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_UART3_CLK_EN_SYNC                                                 */
  RCC_SR1_UART3_CLK_EN_SYNC_CLR_FLAG   = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_UART3_CLK_EN_SYNC_SET_FLAG   = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_UART3_CLK_EN_SYNC_Enum;

/* ===========================================  RCC SR1 SCC_CLK_EN_SYNC [14..14]  ============================================ */
typedef enum {                                  /*!< RCC_SR1_SCC_CLK_EN_SYNC                                                   */
  RCC_SR1_SCC_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_SCC_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_SCC_CLK_EN_SYNC_Enum;

/* ===========================================  RCC SR1 ADC_CLK_EN_SYNC [13..13]  ============================================ */
typedef enum {                                  /*!< RCC_SR1_ADC_CLK_EN_SYNC                                                   */
  RCC_SR1_ADC_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_ADC_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_ADC_CLK_EN_SYNC_Enum;

/* =========================================  RCC SR1 LPTIMER0_CLK_EN_SYNC [12..12]  ========================================= */
typedef enum {                                  /*!< RCC_SR1_LPTIMER0_CLK_EN_SYNC                                              */
  RCC_SR1_LPTIMER0_CLK_EN_SYNC_CLR_FLAG = 0,    /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LPTIMER0_CLK_EN_SYNC_SET_FLAG = 1,    /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LPTIMER0_CLK_EN_SYNC_Enum;

/* ===========================================  RCC SR1 QSPI_CLK_EN_SYNC [11..11]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_QSPI_CLK_EN_SYNC                                                  */
  RCC_SR1_QSPI_CLK_EN_SYNC_CLR_FLAG    = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_QSPI_CLK_EN_SYNC_SET_FLAG    = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_QSPI_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 LPUART_CLK_EN_SYNC [10..10]  ========================================== */
typedef enum {                                  /*!< RCC_SR1_LPUART_CLK_EN_SYNC                                                */
  RCC_SR1_LPUART_CLK_EN_SYNC_CLR_FLAG  = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LPUART_CLK_EN_SYNC_SET_FLAG  = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LPUART_CLK_EN_SYNC_Enum;

/* ============================================  RCC SR1 LCD_CLK_EN_SYNC [9..9]  ============================================= */
typedef enum {                                  /*!< RCC_SR1_LCD_CLK_EN_SYNC                                                   */
  RCC_SR1_LCD_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LCD_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LCD_CLK_EN_SYNC_Enum;

/* ============================================  RCC SR1 IWDG_CLK_EN_SYNC [8..8]  ============================================ */
typedef enum {                                  /*!< RCC_SR1_IWDG_CLK_EN_SYNC                                                  */
  RCC_SR1_IWDG_CLK_EN_SYNC_CLR_FLAG    = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_IWDG_CLK_EN_SYNC_SET_FLAG    = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_IWDG_CLK_EN_SYNC_Enum;

/* ============================================  RCC SR1 RTC_CLK_EN_SYNC [7..7]  ============================================= */
typedef enum {                                  /*!< RCC_SR1_RTC_CLK_EN_SYNC                                                   */
  RCC_SR1_RTC_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_RTC_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_RTC_CLK_EN_SYNC_Enum;

/* ============================================  RCC SR1 MCO_CLK_EN_SYNC [6..6]  ============================================= */
typedef enum {                                  /*!< RCC_SR1_MCO_CLK_EN_SYNC                                                   */
  RCC_SR1_MCO_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_MCO_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_MCO_CLK_EN_SYNC_Enum;

/* ============================================  RCC SR1 I2S_CLK_EN_SYNC [5..5]  ============================================= */
typedef enum {                                  /*!< RCC_SR1_I2S_CLK_EN_SYNC                                                   */
  RCC_SR1_I2S_CLK_EN_SYNC_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_I2S_CLK_EN_SYNC_SET_FLAG     = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_I2S_CLK_EN_SYNC_Enum;

/* ========================================  RCC SR1 LPTIMER0_AON_CLK_EN_SYNC [4..4]  ======================================== */
typedef enum {                                  /*!< RCC_SR1_LPTIMER0_AON_CLK_EN_SYNC                                          */
  RCC_SR1_LPTIMER0_AON_CLK_EN_SYNC_CLR_FLAG = 0,/*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LPTIMER0_AON_CLK_EN_SYNC_SET_FLAG = 1,/*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LPTIMER0_AON_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 LCD_AON_CLK_EN_SYNC [3..3]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_LCD_AON_CLK_EN_SYNC                                               */
  RCC_SR1_LCD_AON_CLK_EN_SYNC_CLR_FLAG = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LCD_AON_CLK_EN_SYNC_SET_FLAG = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LCD_AON_CLK_EN_SYNC_Enum;

/* =========================================  RCC SR1 LPUART_AON_CLK_EN_SYNC [2..2]  ========================================= */
typedef enum {                                  /*!< RCC_SR1_LPUART_AON_CLK_EN_SYNC                                            */
  RCC_SR1_LPUART_AON_CLK_EN_SYNC_CLR_FLAG = 0,  /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_LPUART_AON_CLK_EN_SYNC_SET_FLAG = 1,  /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_LPUART_AON_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 RTC_AON_CLK_EN_SYNC [1..1]  =========================================== */
typedef enum {                                  /*!< RCC_SR1_RTC_AON_CLK_EN_SYNC                                               */
  RCC_SR1_RTC_AON_CLK_EN_SYNC_CLR_FLAG = 0,     /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_RTC_AON_CLK_EN_SYNC_SET_FLAG = 1,     /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_RTC_AON_CLK_EN_SYNC_Enum;

/* ==========================================  RCC SR1 IWDG_AON_CLK_EN_SYNC [0..0]  ========================================== */
typedef enum {                                  /*!< RCC_SR1_IWDG_AON_CLK_EN_SYNC                                              */
  RCC_SR1_IWDG_AON_CLK_EN_SYNC_CLR_FLAG = 0,    /*!< CLR_FLAG : Not synchronized                                               */
  RCC_SR1_IWDG_AON_CLK_EN_SYNC_SET_FLAG = 1,    /*!< SET_FLAG : Synchronized                                                   */
} RCC_SR1_IWDG_AON_CLK_EN_SYNC_Enum;

/* ==========================================================  CR3  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           AFEC                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  REG_0x02  ======================================================== */
/* ===========================================  AFEC REG_0x02 RCO32K_OSC [15..15]  =========================================== */
typedef enum {                                  /*!< AFEC_REG_0x02_RCO32K_OSC                                                  */
  AFEC_REG_0x02_RCO32K_OSC_EN          = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x02_RCO32K_OSC_DIS         = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x02_RCO32K_OSC_Enum;

/* ===========================================  AFEC REG_0x02 XO32K_OSC [13..14]  ============================================ */
typedef enum {                                  /*!< AFEC_REG_0x02_XO32K_OSC                                                   */
  AFEC_REG_0x02_XO32K_OSC_EN           = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x02_XO32K_OSC_DIS          = 3,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x02_XO32K_OSC_Enum;

/* =======================================================  REG_0x03  ======================================================== */
/* ============================================  AFEC REG_0x03 LPWR_XO32K [7..7]  ============================================ */
typedef enum {                                  /*!< AFEC_REG_0x03_LPWR_XO32K                                                  */
  AFEC_REG_0x03_LPWR_XO32K_EN          = 1,     /*!< EN : Enable                                                               */
  AFEC_REG_0x03_LPWR_XO32K_DIS         = 0,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x03_LPWR_XO32K_Enum;

/* =======================================================  REG_0x05  ======================================================== */
/* =============================================  AFEC REG_0x05 LPWR_RUN [3..3]  ============================================= */
typedef enum {                                  /*!< AFEC_REG_0x05_LPWR_RUN                                                    */
  AFEC_REG_0x05_LPWR_RUN_EN            = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x05_LPWR_RUN_DIS           = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x05_LPWR_RUN_Enum;

/* =======================================================  REG_0x06  ======================================================== */
/* ============================================  AFEC REG_0x06 LPWR_RUN [20..21]  ============================================ */
typedef enum {                                  /*!< AFEC_REG_0x06_LPWR_RUN                                                    */
  AFEC_REG_0x06_LPWR_RUN_EN            = 3,     /*!< EN : Enable                                                               */
  AFEC_REG_0x06_LPWR_RUN_DIS           = 0,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x06_LPWR_RUN_Enum;

/* =============================================  AFEC REG_0x06 LCD_ANA [7..7]  ============================================== */
typedef enum {                                  /*!< AFEC_REG_0x06_LCD_ANA                                                     */
  AFEC_REG_0x06_LCD_ANA_EN             = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x06_LCD_ANA_DIS            = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x06_LCD_ANA_Enum;

/* ============================================  AFEC REG_0x06 RCO4M_OSC [6..6]  ============================================= */
typedef enum {                                  /*!< AFEC_REG_0x06_RCO4M_OSC                                                   */
  AFEC_REG_0x06_RCO4M_OSC_EN           = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x06_RCO4M_OSC_DIS          = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x06_RCO4M_OSC_Enum;

/* ============================================  AFEC REG_0x06 RCO48M_OSC [5..5]  ============================================ */
typedef enum {                                  /*!< AFEC_REG_0x06_RCO48M_OSC                                                  */
  AFEC_REG_0x06_RCO48M_OSC_EN          = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x06_RCO48M_OSC_DIS         = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x06_RCO48M_OSC_Enum;

/* ============================================  AFEC REG_0x06 XO24M_OSC [3..4]  ============================================= */
typedef enum {                                  /*!< AFEC_REG_0x06_XO24M_OSC                                                   */
  AFEC_REG_0x06_XO24M_OSC_EN           = 1,     /*!< EN : Enable                                                               */
  AFEC_REG_0x06_XO24M_OSC_DIS          = 2,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x06_XO24M_OSC_Enum;

/* =======================================================  REG_0x09  ======================================================== */
/* =======================================================  REG_0x0A  ======================================================== */
/* =======================================================  REG_0x0B  ======================================================== */
/* =======================================================  REG_0x0C  ======================================================== */
/* =======================================================  REG_0x11  ======================================================== */
/* ==============================================  AFEC REG_0x11 DAC [24..25]  =============================================== */
typedef enum {                                  /*!< AFEC_REG_0x11_DAC                                                         */
  AFEC_REG_0x11_DAC_EN                 = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x11_DAC_DIS                = 3,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x11_DAC_Enum;

/* ===============================================  AFEC REG_0x11 ADC [6..9]  ================================================ */
typedef enum {                                  /*!< AFEC_REG_0x11_ADC                                                         */
  AFEC_REG_0x11_ADC_EN                 = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x11_ADC_DIS                = 15,    /*!< DIS : Disable                                                             */
} AFEC_REG_0x11_ADC_Enum;

/* =======================================================  REG_0x12  ======================================================== */
/* ===============================================  AFEC REG_0x12 DAC [8..8]  ================================================ */
typedef enum {                                  /*!< AFEC_REG_0x12_DAC                                                         */
  AFEC_REG_0x12_DAC_EN                 = 0,     /*!< EN : Enable                                                               */
  AFEC_REG_0x12_DAC_DIS                = 1,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x12_DAC_Enum;

/* =========================================  AFEC REG_0x12 ADC_REF_VOLTAGE [6..6]  ========================================== */
typedef enum {                                  /*!< AFEC_REG_0x12_ADC_REF_VOLTAGE                                             */
  AFEC_REG_0x12_ADC_REF_VOLTAGE_EXT    = 0,     /*!< EXT : ADC external reference voltage                                      */
  AFEC_REG_0x12_ADC_REF_VOLTAGE_INT    = 1,     /*!< INT : ADC internal reference voltage                                      */
} AFEC_REG_0x12_ADC_REF_VOLTAGE_Enum;

/* =======================================================  REG_0x27  ======================================================== */
/* =============================================  AFEC REG_0x27 DAC_EN [11..12]  ============================================= */
typedef enum {                                  /*!< AFEC_REG_0x27_DAC_EN                                                      */
  AFEC_REG_0x27_DAC_EN_EN              = 1,     /*!< EN : Enable                                                               */
  AFEC_REG_0x27_DAC_EN_DIS             = 0,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x27_DAC_EN_Enum;

/* =======================================================  REG_0x2C  ======================================================== */
/* ===========================================  AFEC REG_0x2C ADC_VBAT31 [25..25]  =========================================== */
typedef enum {                                  /*!< AFEC_REG_0x2C_ADC_VBAT31                                                  */
  AFEC_REG_0x2C_ADC_VBAT31_EN          = 1,     /*!< EN : Enable                                                               */
  AFEC_REG_0x2C_ADC_VBAT31_DIS         = 0,     /*!< DIS : Disable                                                             */
} AFEC_REG_0x2C_ADC_VBAT31_Enum;

/* ==========================================================  CR  =========================================================== */
/* ========================================================  INT_SR  ========================================================= */
/* ========================================================  RAW_SR  ========================================================= */
/* ===========================================  AFEC RAW_SR RCO4M_READY [31..31]  ============================================ */
typedef enum {                                  /*!< AFEC_RAW_SR_RCO4M_READY                                                   */
  AFEC_RAW_SR_RCO4M_READY_CLR_FLAG     = 0,     /*!< CLR_FLAG : Not ready                                                      */
  AFEC_RAW_SR_RCO4M_READY_SET_FLAG     = 1,     /*!< SET_FLAG : Ready                                                          */
} AFEC_RAW_SR_RCO4M_READY_Enum;

/* ============================================  AFEC RAW_SR PLL_UNLOCK [30..30]  ============================================ */
typedef enum {                                  /*!< AFEC_RAW_SR_PLL_UNLOCK                                                    */
  AFEC_RAW_SR_PLL_UNLOCK_CLR_FLAG      = 0,     /*!< CLR_FLAG : Not ready                                                      */
  AFEC_RAW_SR_PLL_UNLOCK_SET_FLAG      = 1,     /*!< SET_FLAG : Ready                                                          */
} AFEC_RAW_SR_PLL_UNLOCK_Enum;

/* ============================================  AFEC RAW_SR RCO48M_READY [2..2]  ============================================ */
typedef enum {                                  /*!< AFEC_RAW_SR_RCO48M_READY                                                  */
  AFEC_RAW_SR_RCO48M_READY_CLR_FLAG    = 0,     /*!< CLR_FLAG : Not ready                                                      */
  AFEC_RAW_SR_RCO48M_READY_SET_FLAG    = 1,     /*!< SET_FLAG : Ready                                                          */
} AFEC_RAW_SR_RCO48M_READY_Enum;



/* =========================================================================================================================== */
/* ================                                          SYSCFG                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* ========================================  SYSCFG CR0 DMA0_CH0_HANDSHAKE [24..29]  ========================================= */
/* ========================================  SYSCFG CR0 DMA0_CH1_HANDSHAKE [16..21]  ========================================= */
/* =========================================  SYSCFG CR0 DMA0_CH2_HANDSHAKE [8..13]  ========================================= */
/* =========================================  SYSCFG CR0 DMA0_CH3_HANDSHAKE [0..5]  ========================================== */
/* ==========================================================  CR1  ========================================================== */
/* ========================================  SYSCFG CR1 DMA1_CH0_HANDSHAKE [24..29]  ========================================= */
/* ========================================  SYSCFG CR1 DMA1_CH1_HANDSHAKE [16..21]  ========================================= */
/* =========================================  SYSCFG CR1 DMA1_CH2_HANDSHAKE [8..13]  ========================================= */
/* =========================================  SYSCFG CR1 DMA1_CH3_HANDSHAKE [0..5]  ========================================== */
typedef enum {                                  /*!< SYSCFG_CR01_DMAx_CHx_HANDSHAKE_SEL                                        */
  SYSCFG_CR01_DMA_HSHAKE_SEL_LORAC_TX = 4,      /*!< LORAC_TX : LORAC_TX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_LORAC_RX = 5,      /*!< LORAC_RX : LORAC_RX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_DAC_CTRL = 6,      /*!< DAC_CTRL : DAC_CTRL                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_ADC_CTRL = 7,      /*!< ADC_CTRL : ADC_CTRL                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SCC = 9,           /*!< SCC : SCC                                                                 */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C2_TX = 10,      /*!< I2C2_TX : I2C2_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C2_RX = 11,      /*!< I2C2_RX : I2C2_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C1_TX = 12,      /*!< I2C1_TX : I2C1_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C1_RX = 13,      /*!< I2C1_RX : I2C1_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C0_TX = 14,      /*!< I2C0_TX : I2C0_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_I2C0_RX = 15,      /*!< I2C0_RX : I2C0_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP2_TX = 16,      /*!< SSP2_TX : SSP2_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP2_RX = 17,      /*!< SSP2_RX : SSP2_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP1_TX = 18,      /*!< SSP1_TX : SSP1_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP1_RX = 19,      /*!< SSP1_RX : SSP1_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP0_TX = 20,      /*!< SSP0_TX : SSP0_TX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_SSP0_RX = 21,      /*!< SSP0_RX : SSP0_RX                                                         */
  SYSCFG_CR01_DMA_HSHAKE_SEL_LPUART_TX = 22,    /*!< LPUART_TX : LPUART_TX                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_LPUART_RX = 23,    /*!< LPUART_RX : LPUART_RX                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART3_TX = 24,     /*!< UART3_TX : UART3_TX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART3_RX = 25,     /*!< UART3_RX : UART3_RX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART2_TX = 26,     /*!< UART2_TX : UART2_TX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART2_RX = 27,     /*!< UART2_RX : UART2_RX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART1_TX = 28,     /*!< UART1_TX : UART1_TX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART1_RX = 29,     /*!< UART1_RX : UART1_RX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART0_TX = 30,     /*!< UART0_TX : UART0_TX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_UART0_RX = 31,     /*!< UART0_RX : UART0_RX                                                       */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_CH3 = 32,   /*!< TIMER0_CH3 : TIMER0_CH3                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_CH2 = 33,   /*!< TIMER0_CH2 : TIMER0_CH2                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_CH1 = 34,   /*!< TIMER0_CH1 : TIMER0_CH1                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_CH0 = 35,   /*!< TIMER0_CH0 : TIMER0_CH0                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_TRG = 36,   /*!< TIMER0_TRG : TIMER0_TRG                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER0_UP = 37,    /*!< TIMER0_UP : TIMER0_UP                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_CH3 = 38,   /*!< TIMER1_CH3 : TIMER1_CH3                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_CH2 = 39,   /*!< TIMER1_CH2 : TIMER1_CH2                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_CH1 = 40,   /*!< TIMER1_CH1 : TIMER1_CH1                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_CH0 = 41,   /*!< TIMER1_CH0 : TIMER1_CH0                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_TRG = 42,   /*!< TIMER1_TRG : TIMER1_TRG                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER1_UP = 43,    /*!< TIMER1_UP : TIMER1_UP                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER2_CH1 = 44,   /*!< TIMER2_CH1 : TIMER2_CH1                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER2_CH0 = 45,   /*!< TIMER2_CH0 : TIMER2_CH0                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER2_TRG = 46,   /*!< TIMER2_TRG : TIMER2_TRG                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER2_UP = 47,    /*!< TIMER2_UP : TIMER2_UP                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER3_CH1 = 48,   /*!< TIMER3_CH1 : TIMER3_CH1                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER3_CH0 = 49,   /*!< TIMER3_CH0 : TIMER3_CH0                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER3_TRG = 50,   /*!< TIMER3_TRG : TIMER3_TRG                                                   */
  SYSCFG_CR01_DMA_HSHAKE_SEL_TIMER3_UP = 51,    /*!< TIMER3_UP : TIMER3_UP                                                     */
  SYSCFG_CR01_DMA_HSHAKE_SEL_BSTIMER1_UP = 52,  /*!< BSTIMER1_UP : BSTIMER1_UP                                                 */
  SYSCFG_CR01_DMA_HSHAKE_SEL_BSTIMER0_UP = 53,  /*!< BSTIMER0_UP : BSTIMER0_UP                                                 */
} SYSCFG_CR01_DMA_HSHAKE_SEL_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  CR3  ========================================================== */
/* ==========================================================  CR4  ========================================================== */
/* =============================================  SYSCFG CR4 BOOT_MODE [29..29]  ============================================= */
typedef enum {                                  /*!< SYSCFG_CR4_BOOT_MODE                                                      */
  SYSCFG_CR4_BOOT_MODE_APP             = 0,     /*!< APP : Application                                                         */
  SYSCFG_CR4_BOOT_MODE_BTL             = 1,     /*!< BTL : Bootloader                                                          */
} SYSCFG_CR4_BOOT_MODE_Enum;

/* ==========================================================  CR5  ========================================================== */
/* ==========================================================  CR6  ========================================================== */
/* ==========================================================  CR7  ========================================================== */
/* ==========================================================  CR8  ========================================================== */
/* ==========================================================  CR9  ========================================================== */
/* =========================================================  CR10  ========================================================== */
/* ==============================================  SYSCFG CR10 I2S_WS [22..22]  ============================================== */
typedef enum {                                  /*!< SYSCFG_CR10_I2S_WS                                                        */
  SYSCFG_CR10_I2S_WS_EN                = 1,     /*!< EN : Enable                                                               */
  SYSCFG_CR10_I2S_WS_DIS               = 0,     /*!< DIS : Disable                                                             */
} SYSCFG_CR10_I2S_WS_Enum;

/* ============================================  SYSCFG CR10 I2S_MASTER [14..14]  ============================================ */
typedef enum {                                  /*!< SYSCFG_CR10_I2S_MASTER                                                    */
  SYSCFG_CR10_I2S_MASTER_EN            = 1,     /*!< EN : Enable                                                               */
  SYSCFG_CR10_I2S_MASTER_DIS           = 0,     /*!< DIS : Disable                                                             */
} SYSCFG_CR10_I2S_MASTER_Enum;



/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  DR  =========================================================== */
/* ========================================================  RSC_ECR  ======================================================== */
/* ==========================================================  FR  =========================================================== */
/* ==================================================  UART FR RI [8..8]  =================================================== */
typedef enum {                                  /*!< UART_FR_RI                                                               */
  UART_FR_RI_CLR_FLAG                 = 0,     /*!< CLR_FLAG : RI is high                                                     */
  UART_FR_RI_SET_FLAG                 = 1,     /*!< SET_FLAG : RI is low                                                      */
} UART_FR_RI_Enum;

/* =================================================  UART FR TXFE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_FR_TXFE                                                             */
  UART_FR_TXFE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Transmit FIFO is not empty                                     */
  UART_FR_TXFE_SET_FLAG               = 1,     /*!< SET_FLAG : Transmit FIFO is empty                                         */
} UART_FR_TXFE_Enum;

/* =================================================  UART FR RXFF [6..6]  ================================================== */
typedef enum {                                  /*!< UART_FR_RXFF                                                             */
  UART_FR_RXFF_CLR_FLAG               = 0,     /*!< CLR_FLAG : Receive FIFO not full                                          */
  UART_FR_RXFF_SET_FLAG               = 1,     /*!< SET_FLAG : Receive FIFO full                                              */
} UART_FR_RXFF_Enum;

/* =================================================  UART FR TXFF [5..5]  ================================================== */
typedef enum {                                  /*!< UART_FR_TXFF                                                             */
  UART_FR_TXFF_CLR_FLAG               = 0,     /*!< CLR_FLAG : Transmit FIFO not full                                         */
  UART_FR_TXFF_SET_FLAG               = 1,     /*!< SET_FLAG : Transmit FIFO full                                             */
} UART_FR_TXFF_Enum;

/* =================================================  UART FR RXFE [4..4]  ================================================== */
typedef enum {                                  /*!< UART_FR_RXFE                                                             */
  UART_FR_RXFE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Receive FIFO is not empty                                      */
  UART_FR_RXFE_SET_FLAG               = 1,     /*!< SET_FLAG : Receive FIFO is empty                                          */
} UART_FR_RXFE_Enum;

/* =================================================  UART FR BUSY [3..3]  ================================================== */
typedef enum {                                  /*!< UART_FR_BUSY                                                             */
  UART_FR_BUSY_CLR_FLAG               = 0,     /*!< CLR_FLAG : Not busy                                                       */
  UART_FR_BUSY_SET_FLAG               = 1,     /*!< SET_FLAG : Busy                                                           */
} UART_FR_BUSY_Enum;

/* ==================================================  UART FR DCD [2..2]  ================================================== */
typedef enum {                                  /*!< UART_FR_DCD                                                              */
  UART_FR_DCD_CLR_FLAG                = 0,     /*!< CLR_FLAG : DCD is high                                                    */
  UART_FR_DCD_SET_FLAG                = 1,     /*!< SET_FLAG : DCD is low                                                     */
} UART_FR_DCD_Enum;

/* ==================================================  UART FR DSR [1..1]  ================================================== */
typedef enum {                                  /*!< UART_FR_DSR                                                              */
  UART_FR_DSR_CLR_FLAG                = 0,     /*!< CLR_FLAG : DSR is high                                                    */
  UART_FR_DSR_SET_FLAG                = 1,     /*!< SET_FLAG : DSR is low                                                     */
} UART_FR_DSR_Enum;

/* ==================================================  UART FR CTS [0..0]  ================================================== */
typedef enum {                                  /*!< UART_FR_CTS                                                              */
  UART_FR_CTS_CLR_FLAG                = 0,     /*!< CLR_FLAG : CTS is high                                                    */
  UART_FR_CTS_SET_FLAG                = 1,     /*!< SET_FLAG : CTS is low                                                     */
} UART_FR_CTS_Enum;

/* =========================================================  ILPR  ========================================================== */
/* =========================================================  IBRD  ========================================================== */
/* =========================================================  FBRD  ========================================================== */
/* =========================================================  LCR_H  ========================================================= */
/* ================================================  UART LCR_H SPS [7..7]  ================================================= */
typedef enum {                                  /*!< UART_LCR_H_SPS                                                           */
  UART_LCR_H_SPS_DIS                  = 0,     /*!< DIS : Stick parity disable                                                */
  UART_LCR_H_SPS_EN                   = 1,     /*!< EN : Stick parity enable                                                  */
} UART_LCR_H_SPS_Enum;

/* ================================================  UART LCR_H WLEN [5..6]  ================================================ */
typedef enum {                                  /*!< UART_LCR_H_WLEN                                                          */
  UART_LCR_H_WLEN_5                   = 0,     /*!< 5 : 5 bytes                                                               */
  UART_LCR_H_WLEN_6                   = 1,     /*!< 6 : 6 bytes                                                               */
  UART_LCR_H_WLEN_7                   = 2,     /*!< 7 : 7 bytes                                                               */
  UART_LCR_H_WLEN_8                   = 3,     /*!< 8 : 8 bytes                                                               */
} UART_LCR_H_WLEN_Enum;

/* ================================================  UART LCR_H FEN [4..4]  ================================================= */
typedef enum {                                  /*!< UART_LCR_H_FEN                                                           */
  UART_LCR_H_FEN_DIS                  = 0,     /*!< DIS : FIFOs disable                                                       */
  UART_LCR_H_FEN_EN                   = 1,     /*!< EN : FIFOs enable                                                         */
} UART_LCR_H_FEN_Enum;

/* ================================================  UART LCR_H STP2 [3..3]  ================================================ */
typedef enum {                                  /*!< UART_LCR_H_STP2                                                          */
  UART_LCR_H_STP2_1                   = 0,     /*!< 1 : 1 stop bit                                                            */
  UART_LCR_H_STP2_2                   = 1,     /*!< 2 : 2 stop bits                                                           */
} UART_LCR_H_STP2_Enum;

/* ================================================  UART LCR_H EPS [2..2]  ================================================= */
typedef enum {                                  /*!< UART_LCR_H_EPS                                                           */
  UART_LCR_H_EPS_DIS                  = 0,     /*!< DIS : Odd parity                                                          */
  UART_LCR_H_EPS_EN                   = 1,     /*!< EN : Even parity                                                          */
} UART_LCR_H_EPS_Enum;

/* ================================================  UART LCR_H PEN [1..1]  ================================================= */
typedef enum {                                  /*!< UART_LCR_H_PEN                                                           */
  UART_LCR_H_PEN_DIS                  = 0,     /*!< DIS : Parity bit disable                                                  */
  UART_LCR_H_PEN_EN                   = 1,     /*!< EN : Parity bit enable                                                    */
} UART_LCR_H_PEN_Enum;

/* ================================================  UART LCR_H BRK [0..0]  ================================================= */
typedef enum {                                  /*!< UART_LCR_H_BRK                                                           */
  UART_LCR_H_BRK_DIS                  = 0,     /*!< DIS : Normal use                                                          */
  UART_LCR_H_BRK_EN                   = 1,     /*!< EN : Send break                                                           */
} UART_LCR_H_BRK_Enum;

/* ==========================================================  CR  =========================================================== */
/* =================================================  UART CR CTS [15..15]  ================================================= */
typedef enum {                                  /*!< UART_CR_CTS                                                              */
  UART_CR_CTSEN_DIS                   = 0,     /*!< DIS : CTS disable                                                         */
  UART_CR_CTSEN_EN                    = 1,     /*!< EN : CTS enable                                                           */
} UART_CR_CTS_Enum;

/* =================================================  UART CR RTS [14..14]  ================================================= */
typedef enum {                                  /*!< UART_CR_RTS                                                              */
  UART_CR_RTSEN_DIS                   = 0,     /*!< DIS : RTS disable                                                         */
  UART_CR_RTSEN_EN                    = 1,     /*!< EN : RTS enable                                                           */
} UART_CR_RTS_Enum;

/* ==================================================  UART CR RXE [9..9]  ================================================== */
typedef enum {                                  /*!< UART_CR_RXE                                                              */
  UART_CR_RXE_DIS                     = 0,     /*!< DIS : Receive disable                                                     */
  UART_CR_RXE_EN                      = 1,     /*!< EN : Receive enable                                                       */
} UART_CR_RXE_Enum;

/* ==================================================  UART CR TXE [8..8]  ================================================== */
typedef enum {                                  /*!< UART_CR_TXE                                                              */
  UART_CR_TXE_DIS                     = 0,     /*!< DIS : Transmit disable                                                    */
  UART_CR_TXE_EN                      = 1,     /*!< EN : Transmit enable                                                      */
} UART_CR_TXE_Enum;

/* ==================================================  UART CR LBE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_CR_LBE                                                              */
  UART_CR_LBE_DIS                     = 0,     /*!< DIS : Loopback disable                                                    */
  UART_CR_LBE_EN                      = 1,     /*!< EN : Loopback enable                                                      */
} UART_CR_LBE_Enum;

/* =================================================  UART CR SIRLP [2..2]  ================================================= */
typedef enum {                                  /*!< UART_CR_SIRLP                                                            */
  UART_CR_SIRLP_DIS                   = 0,     /*!< DIS : SIR low-power IrDA mode disable                                     */
  UART_CR_SIRLP_EN                    = 1,     /*!< EN : SIR low-power IrDA mode enable                                       */
} UART_CR_SIRLP_Enum;

/* =================================================  UART CR SIREN [1..1]  ================================================= */
typedef enum {                                  /*!< UART_CR_SIREN                                                            */
  UART_CR_SIREN_DIS                   = 0,     /*!< DIS : SIR disable                                                         */
  UART_CR_SIREN_EN                    = 1,     /*!< EN : SIR enable                                                           */
} UART_CR_SIREN_Enum;

/* ================================================  UART CR UARTEN [0..0]  ================================================= */
typedef enum {                                  /*!< UART_CR_UARTEN                                                           */
  UART_CR_UARTEN_DIS                  = 0,     /*!< DIS : UART disable                                                        */
  UART_CR_UARTEN_EN                   = 1,     /*!< EN : UART enable                                                          */
} UART_CR_UARTEN_Enum;

/* =========================================================  IFLS  ========================================================== */
/* ==============================================  UART IFLS RXIFLSEL [3..5]  =============================================== */
typedef enum {                                  /*!< UART_IFLS_RXIFLSEL_LEVEL                                                 */
  UART_IFLS_RXIFLSEL_LEVEL_1_8        = 0,     /*!< 1_8 : 1/8                                                                 */
  UART_IFLS_RXIFLSEL_LEVEL_1_4        = 1,     /*!< 1_4 : 1/4                                                                 */
  UART_IFLS_RXIFLSEL_LEVEL_1_2        = 2,     /*!< 1_2 : 1/2                                                                 */
  UART_IFLS_RXIFLSEL_LEVEL_3_4        = 3,     /*!< 3_4 : 3/4                                                                 */
  UART_IFLS_RXIFLSEL_LEVEL_7_8        = 4,     /*!< 7_8 : 7/8                                                                 */
} UART_IFLS_RXIFLSEL_LEVEL_Enum;

/* ==============================================  UART IFLS TXIFLSEL [0..2]  =============================================== */
typedef enum {                                  /*!< UART_IFLS_TXIFLSEL_LEVEL                                                 */
  UART_IFLS_TXIFLSEL_LEVEL_1_8        = 0,     /*!< 1_8 : 1/8                                                                 */
  UART_IFLS_TXIFLSEL_LEVEL_1_4        = 1,     /*!< 1_4 : 1/4                                                                 */
  UART_IFLS_TXIFLSEL_LEVEL_1_2        = 2,     /*!< 1_2 : 1/2                                                                 */
  UART_IFLS_TXIFLSEL_LEVEL_3_4        = 3,     /*!< 3_4 : 3/4                                                                 */
  UART_IFLS_TXIFLSEL_LEVEL_7_8        = 4,     /*!< 7_8 : 7/8                                                                 */
} UART_IFLS_TXIFLSEL_LEVEL_Enum;

/* =========================================================  IMSC  ========================================================== */
/* ================================================  UART IMSC OE [10..10]  ================================================= */
typedef enum {                                  /*!< UART_IMSC_OE                                                             */
  UART_IMSC_OE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Overrun error interrupt is masked                              */
  UART_IMSC_OE_SET_FLAG               = 1,     /*!< SET_FLAG : Overrun error interrupt is not masked                          */
} UART_IMSC_OE_Enum;

/* =================================================  UART IMSC BE [9..9]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_BE                                                             */
  UART_IMSC_BE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Break error interrupt is masked                                */
  UART_IMSC_BE_SET_FLAG               = 1,     /*!< SET_FLAG : Break error interrupt is not masked                            */
} UART_IMSC_BE_Enum;

/* =================================================  UART IMSC PE [8..8]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_PE                                                             */
  UART_IMSC_PE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Parity error interrupt is masked                               */
  UART_IMSC_PE_SET_FLAG               = 1,     /*!< SET_FLAG : Parity error interrupt is not masked                           */
} UART_IMSC_PE_Enum;

/* =================================================  UART IMSC FE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_FE                                                             */
  UART_IMSC_FE_CLR_FLAG               = 0,     /*!< CLR_FLAG : Framing error interrupt is masked                              */
  UART_IMSC_FE_SET_FLAG               = 1,     /*!< SET_FLAG : Framing error interrupt is not masked                          */
} UART_IMSC_FE_Enum;

/* =================================================  UART IMSC RT [6..6]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_RT                                                             */
  UART_IMSC_RT_CLR_FLAG               = 0,     /*!< CLR_FLAG : Receive timeout interrupt is masked                            */
  UART_IMSC_RT_SET_FLAG               = 1,     /*!< SET_FLAG : Receive timeout interrupt is not masked                        */
} UART_IMSC_RT_Enum;

/* =================================================  UART IMSC TX [5..5]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_TX                                                             */
  UART_IMSC_TX_CLR_FLAG               = 0,     /*!< CLR_FLAG : Transmit interrupt mask is masked                              */
  UART_IMSC_TX_SET_FLAG               = 1,     /*!< SET_FLAG : Transmit interrupt mask is not masked                          */
} UART_IMSC_TX_Enum;

/* =================================================  UART IMSC RX [4..4]  ================================================== */
typedef enum {                                  /*!< UART_IMSC_RX                                                             */
  UART_IMSC_RX_CLR_FLAG               = 0,     /*!< CLR_FLAG : Receive interrupt mask is masked                               */
  UART_IMSC_RX_SET_FLAG               = 1,     /*!< SET_FLAG : Receive interrupt mask is not masked                           */
} UART_IMSC_RX_Enum;

/* ==========================================================  RIS  ========================================================== */
/* =================================================  UART RIS OE [10..10]  ================================================= */
typedef enum {                                  /*!< UART_RIS_OE                                                              */
  UART_RIS_OE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_OE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_OE_Enum;

/* ==================================================  UART RIS BE [9..9]  ================================================== */
typedef enum {                                  /*!< UART_RIS_BE                                                              */
  UART_RIS_BE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_BE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_BE_Enum;

/* ==================================================  UART RIS PE [8..8]  ================================================== */
typedef enum {                                  /*!< UART_RIS_PE                                                              */
  UART_RIS_PE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_PE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_PE_Enum;

/* ==================================================  UART RIS FE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_RIS_FE                                                              */
  UART_RIS_FE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_FE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_FE_Enum;

/* ==================================================  UART RIS RT [6..6]  ================================================== */
typedef enum {                                  /*!< UART_RIS_RT                                                              */
  UART_RIS_RT_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_RT_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_RT_Enum;

/* ==================================================  UART RIS TX [5..5]  ================================================== */
typedef enum {                                  /*!< UART_RIS_TX                                                              */
  UART_RIS_TX_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_TX_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_TX_Enum;

/* ==================================================  UART RIS RX [4..4]  ================================================== */
typedef enum {                                  /*!< UART_RIS_RX                                                              */
  UART_RIS_RX_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_RIS_RX_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_RIS_RX_Enum;

/* ==========================================================  MIS  ========================================================== */
/* =================================================  UART MIS OE [10..10]  ================================================= */
typedef enum {                                  /*!< UART_MIS_OE                                                              */
  UART_MIS_OE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_OE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_OE_Enum;

/* ==================================================  UART MIS BE [9..9]  ================================================== */
typedef enum {                                  /*!< UART_MIS_BE                                                              */
  UART_MIS_BE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_BE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_BE_Enum;

/* ==================================================  UART MIS PE [8..8]  ================================================== */
typedef enum {                                  /*!< UART_MIS_PE                                                              */
  UART_MIS_PE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_PE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_PE_Enum;

/* ==================================================  UART MIS FE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_MIS_FE                                                              */
  UART_MIS_FE_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_FE_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_FE_Enum;

/* ==================================================  UART MIS RT [6..6]  ================================================== */
typedef enum {                                  /*!< UART_MIS_RT                                                              */
  UART_MIS_RT_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_RT_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_RT_Enum;

/* ==================================================  UART MIS TX [5..5]  ================================================== */
typedef enum {                                  /*!< UART_MIS_TX                                                              */
  UART_MIS_TX_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_TX_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_TX_Enum;

/* ==================================================  UART MIS RX [4..4]  ================================================== */
typedef enum {                                  /*!< UART_MIS_RX                                                              */
  UART_MIS_RX_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered                                        */
  UART_MIS_RX_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered                                            */
} UART_MIS_RX_Enum;

/* ==========================================================  ICR  ========================================================== */
/* =================================================  UART ICR OE [10..10]  ================================================= */
typedef enum {                                  /*!< UART_ICR_OE                                                              */
  UART_ICR_OE_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_OE_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_OE_Enum;

/* ==================================================  UART ICR BE [9..9]  ================================================== */
typedef enum {                                  /*!< UART_ICR_BE                                                              */
  UART_ICR_BE_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_BE_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_BE_Enum;

/* ==================================================  UART ICR PE [8..8]  ================================================== */
typedef enum {                                  /*!< UART_ICR_PE                                                              */
  UART_ICR_PE_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_PE_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_PE_Enum;

/* ==================================================  UART ICR FE [7..7]  ================================================== */
typedef enum {                                  /*!< UART_ICR_FE                                                              */
  UART_ICR_FE_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_FE_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_FE_Enum;

/* ==================================================  UART ICR RT [6..6]  ================================================== */
typedef enum {                                  /*!< UART_ICR_RT                                                              */
  UART_ICR_RT_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_RT_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_RT_Enum;

/* ==================================================  UART ICR TX [5..5]  ================================================== */
typedef enum {                                  /*!< UART_ICR_TX                                                              */
  UART_ICR_TX_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_TX_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_TX_Enum;

/* ==================================================  UART ICR RX [4..4]  ================================================== */
typedef enum {                                  /*!< UART_ICR_RX                                                              */
  UART_ICR_RX_CLR_FLAG                = 0,     /*!< CLR_FLAG : No effect                                                      */
  UART_ICR_RX_SET_FLAG                = 1,     /*!< SET_FLAG : Clear interrupt                                                */
} UART_ICR_RX_Enum;

/* =========================================================  DMACR  ========================================================= */
/* ===============================================  UART DMACR ONERR [2..2]  ================================================= */
typedef enum {                                  /*!< UART_DMACR_ONERR                                                          */
  UART_DMACR_ONERR_DIS                = 0,      /*!< DIS : DMA on error disable                                                */
  UART_DMACR_ONERR_EN                 = 1,      /*!< EN : DMA on error enable                                                  */
} UART_DMACR_ONERR_Enum;

/* =================================================  UART DMACR TX [1..1]  ================================================== */
typedef enum {                                  /*!< UART_DMACR_TX                                                             */
  UART_DMACR_TX_DIS                   = 0,      /*!< DIS : Transmit DMA disable                                                */
  UART_DMACR_TX_EN                    = 1,      /*!< EN : Transmit DMA enable                                                  */
} UART_DMACR_TX_Enum;

/* =================================================  UART DMACR RX [0..0]  ================================================== */
typedef enum {                                  /*!< UART_DMACR_RX                                                             */
  UART_DMACR_RX_DIS                    = 0,     /*!< DIS : Receive DMA disable                                                 */
  UART_DMACR_RX_EN                     = 1,     /*!< EN : Receive DMA enable                                                   */
} UART_DMACR_RX_Enum;


/* =========================================================================================================================== */
/* ================                                            EFC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  EFC CR INFO_LOAD [31..31]  =============================================== */
typedef enum {                                  /*!< EFC_CR_INFO_LOAD                                                          */
  EFC_CR_INFO_LOAD_DIS                 = 0,     /*!< DIS : UNKNOWN                                                             */
  EFC_CR_INFO_LOAD_EN                  = 1,     /*!< EN : UNKNOWN                                                              */
} EFC_CR_INFO_LOAD_Enum;

/* ===================================================  EFC CR ECC [9..9]  =================================================== */
typedef enum {                                  /*!< EFC_CR_ECC                                                                */
  EFC_CR_ECC_DIS                       = 0,     /*!< DIS : ECC disable                                                         */
  EFC_CR_ECC_EN                        = 1,     /*!< EN : ECC enable                                                           */
} EFC_CR_ECC_Enum;

/* ================================================  EFC CR OPTION_OP [8..8]  ================================================ */
typedef enum {                                  /*!< EFC_CR_OPTION_OP                                                          */
  EFC_CR_OPTION_OP_DIS                 = 0,     /*!< DIS : UNKNOWN                                                             */
  EFC_CR_OPTION_OP_EN                  = 1,     /*!< EN : UNKNOWN                                                              */
} EFC_CR_OPTION_OP_Enum;

/* ===============================================  EFC CR FACTORY_OP [7..7]  ================================================ */
typedef enum {                                  /*!< EFC_CR_FACTORY_OP                                                         */
  EFC_CR_FACTORY_OP_DIS                = 0,     /*!< DIS : UNKNOWN                                                             */
  EFC_CR_FACTORY_OP_EN                 = 1,     /*!< EN : UNKNOWN                                                              */
} EFC_CR_FACTORY_OP_Enum;

/* ==============================================  EFC CR WRITE_RELEASE [6..6]  ============================================== */
typedef enum {                                  /*!< EFC_CR_WRITE_RELEASE                                                      */
  EFC_CR_WRITE_RELEASE_DIS             = 0,     /*!< DIS : UNKNOWN                                                             */
  EFC_CR_WRITE_RELEASE_EN              = 1,     /*!< EN : UNKNOWN                                                              */
} EFC_CR_WRITE_RELEASE_Enum;

/* ================================================  EFC CR PREFETCH [5..5]  ================================================= */
typedef enum {                                  /*!< EFC_CR_PREFETCH                                                           */
  EFC_CR_PREFETCH_DIS                  = 0,     /*!< DIS : Prefetch buffer disable                                             */
  EFC_CR_PREFETCH_EN                   = 1,     /*!< EN : Prefetch buffer enable                                               */
} EFC_CR_PREFETCH_Enum;

/* ================================================  EFC CR READ_ACC [4..4]  ================================================= */
typedef enum {                                  /*!< EFC_CR_READ_ACC                                                           */
  EFC_CR_READ_ACC_DIS                  = 0,     /*!< DIS : UNKNOWN                                                             */
  EFC_CR_READ_ACC_EN                   = 1,     /*!< EN : UNKNOWN                                                              */
} EFC_CR_READ_ACC_Enum;

/* ================================================  EFC CR PROG_MODE [3..3]  ================================================ */
typedef enum {                                  /*!< EFC_CR_PROG_MODE                                                          */
  EFC_CR_PROG_MODE_DWORD               = 0,     /*!< DWORD : 4 bytes                                                           */
  EFC_CR_PROG_MODE_WLINE               = 1,     /*!< WLINE : 512 bytes                                                         */
} EFC_CR_PROG_MODE_Enum;

/* ==================================================  EFC CR PROG [2..2]  =================================================== */
typedef enum {                                  /*!< EFC_CR_PROG                                                               */
  EFC_CR_PROG_DIS                      = 0,     /*!< DIS : Flash programming disable                                           */
  EFC_CR_PROG_EN                       = 1,     /*!< EN : Flash programming enable                                             */
} EFC_CR_PROG_Enum;

/* ===============================================  EFC CR PAGE_ERASE [1..1]  ================================================ */
typedef enum {                                  /*!< EFC_CR_PAGE_ERASE                                                         */
  EFC_CR_PAGE_ERASE_DIS                = 0,     /*!< DIS : Page erase disable                                                  */
  EFC_CR_PAGE_ERASE_EN                 = 1,     /*!< EN : Page erase enable                                                    */
} EFC_CR_PAGE_ERASE_Enum;

/* ===============================================  EFC CR MASS_ERASE [0..0]  ================================================ */
typedef enum {                                  /*!< EFC_CR_MASS_ERASE                                                         */
  EFC_CR_MASS_ERASE_DIS                = 0,     /*!< DIS : Mass erase disable                                                  */
  EFC_CR_MASS_ERASE_EN                 = 1,     /*!< EN : Mass erase enable                                                    */
} EFC_CR_MASS_ERASE_Enum;

/* ========================================================  INT_EN  ========================================================= */
/* ==========================================================  SR  =========================================================== */
/* ===========================================  EFC SR OPTION_WRITE_ERROR [4..4]  ============================================ */
typedef enum {                                  /*!< EFC_SR_OPTION_WRITE_ERROR                                                 */
  EFC_SR_OPTION_WRITE_ERROR_CLR_FLAG   = 0,     /*!< CLR_FLAG : UNKNOWN                                                        */
  EFC_SR_OPTION_WRITE_ERROR_SET_FLAG   = 1,     /*!< SET_FLAG : UNKNOWN                                                        */
} EFC_SR_OPTION_WRITE_ERROR_Enum;

/* ============================================  EFC SR PROGRAM_DATA_WAIT [2..2]  ============================================ */
typedef enum {                                  /*!< EFC_SR_PROGRAM_DATA_WAIT                                                  */
  EFC_SR_PROGRAM_DATA_WAIT_CLR_FLAG    = 0,     /*!< CLR_FLAG : Wait                                                           */
  EFC_SR_PROGRAM_DATA_WAIT_SET_FLAG    = 1,     /*!< SET_FLAG : Don't wait                                                     */
} EFC_SR_PROGRAM_DATA_WAIT_Enum;

/* ==============================================  EFC SR READ_NUM_DONE [1..1]  ============================================== */
typedef enum {                                  /*!< EFC_SR_READ_NUM_DONE                                                      */
  EFC_SR_READ_NUM_DONE_CLR_FLAG        = 0,     /*!< CLR_FLAG : Latency? change in progress                                    */
  EFC_SR_READ_NUM_DONE_SET_FLAG        = 1,     /*!< SET_FLAG : Latency? change done                                           */
} EFC_SR_READ_NUM_DONE_Enum;

/* =============================================  EFC SR OPERATION_DONE [0..0]  ============================================== */
typedef enum {                                  /*!< EFC_SR_OPERATION_DONE                                                     */
  EFC_SR_OPERATION_DONE_CLR_FLAG       = 0,     /*!< CLR_FLAG : Operation in progress                                          */
  EFC_SR_OPERATION_DONE_SET_FLAG       = 1,     /*!< SET_FLAG : Operation done                                                 */
} EFC_SR_OPERATION_DONE_Enum;

/* =====================================================  PROGRAM_DATA0  ===================================================== */
/* =====================================================  PROGRAM_DATA1  ===================================================== */
/* ======================================================  TIMING_CFG  ======================================================= */
/* ======================================================  PROTECT_SEQ  ====================================================== */
/* =====================================================  CHIP_PATTERN  ====================================================== */
/* =======================================================  IP_TRIM_L  ======================================================= */
/* =======================================================  IP_TRIM_H  ======================================================= */
/* =========================================================  SN_L  ========================================================== */
/* =========================================================  SN_H  ========================================================== */
/* ======================================================  TEST_INFO_L  ====================================================== */
/* ======================================================  TEST_INFO_H  ====================================================== */
/* ===================================================  OPTION_CSR_BYTES  ==================================================== */
/* ====================================================  OPTION_EO_BYTES  ==================================================== */
/* ====================================================  OPTION_WP_BYTES  ==================================================== */
/* ===================================================  OPTION_SEC_BYTES0  =================================================== */
/* ===================================================  OPTION_SEC_BYTES1  =================================================== */


/* =========================================================================================================================== */
/* ================                                           GPIO                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  OER  ========================================================== */
/* ========================================================  OTYPER  ========================================================= */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  PER  ========================================================== */
/* ==========================================================  PSR  ========================================================== */
/* ==========================================================  IDR  ========================================================== */
/* ==========================================================  ODR  ========================================================== */
/* ==========================================================  BRR  ========================================================== */
/* ==========================================================  BSR  ========================================================== */
/* ==========================================================  DSR  ========================================================== */
/* ==========================================================  ICR  ========================================================== */
/* ==========================================================  IFR  ========================================================== */
/* =========================================================  WUCR  ========================================================== */
/* =========================================================  WULVL  ========================================================= */
/* =========================================================  AFRL  ========================================================== */
/* =========================================================  AFRH  ========================================================== */
/* ======================================================  STOP3_WUCR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           SSP                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR0  ========================================================== */
/* ==================================================  SSP CR0 SPH [7..7]  =================================================== */
typedef enum {                                  /*!< SSP_CR0_SPH                                                               */
  SSP_CR0_SPH_1EDGE                   = 0,      /*!< 1EDGE : Data is captured on the first clock edge transition               */
  SSP_CR0_SPH_2EDGE                   = 1,      /*!< 2EDGE : Data is captured on the second clock edge transition              */
} SSP_CR0_SPH_Enum;

/* ==================================================  SSP CR0 SPO [6..6]  =================================================== */
typedef enum {                                  /*!< SSP_CR0_SPO                                                               */
  SSP_CR0_SPO_LOW                     = 0,      /*!< LOW : A steady state LOW value on the clock pin                           */
  SSP_CR0_SPO_HIGH                    = 1,      /*!< HIGH : A steady state HIGH value on the clock pin                         */
} SSP_CR0_SPO_Enum;

/* ==================================================  SSP CR0 FRF [4..5]  =================================================== */
typedef enum {                                  /*!< SSP_CR0_FRF                                                               */
  SSP_CR0_FRF_SPI                     = 0,      /*!< SPI : Motorola SPI frame format                                           */
  SSP_CR0_FRF_TI                      = 1,      /*!< TI : TI synchronous serial frame format                                   */
  SSP_CR0_FRF_MW                      = 2,      /*!< MW : National Microwire frame format                                      */
} SSP_CR0_FRF_Enum;

/* ==================================================  SSP CR0 DSS [0..3]  =================================================== */
typedef enum {                                  /*!< SSP_CR0_DSS                                                               */
  SSP_CR0_DSS_4BIT                    = 3,      /*!< 4BIT : 4-bit data                                                         */
  SSP_CR0_DSS_5BIT                    = 4,      /*!< 5BIT : 5-bit data                                                         */
  SSP_CR0_DSS_6BIT                    = 5,      /*!< 6BIT : 6-bit data                                                         */
  SSP_CR0_DSS_7BIT                    = 6,      /*!< 7BIT : 7-bit data                                                         */
  SSP_CR0_DSS_8BIT                    = 7,      /*!< 8BIT : 8-bit data                                                         */
  SSP_CR0_DSS_9BIT                    = 8,      /*!< 9BIT : 9-bit data                                                         */
  SSP_CR0_DSS_10BIT                   = 9,      /*!< 10BIT : 10-bit data                                                       */
  SSP_CR0_DSS_11BIT                   = 10,     /*!< 11BIT : 11-bit data                                                       */
  SSP_CR0_DSS_12BIT                   = 11,     /*!< 12BIT : 12-bit data                                                       */
  SSP_CR0_DSS_13BIT                   = 12,     /*!< 13BIT : 13-bit data                                                       */
  SSP_CR0_DSS_14BIT                   = 13,     /*!< 14BIT : 14-bit data                                                       */
  SSP_CR0_DSS_15BIT                   = 14,     /*!< 15BIT : 15-bit data                                                       */
  SSP_CR0_DSS_16BIT                   = 15,     /*!< 16BIT : 16-bit data                                                       */
} SSP_CR0_DSS_Enum;

/* ==========================================================  CR1  ========================================================== */
/* ==================================================  SSP CR1 SOD [3..3]  =================================================== */
typedef enum {                                  /*!< SSP_CR1_SOD                                                               */
  SSP_CR1_SOD_EN                      = 0,      /*!< EN : SSP can drive the TXD output in slave mode                           */
  SSP_CR1_SOD_DIS                     = 1,      /*!< DIS : SSP must not drive the TXD output in slave mode                     */
} SSP_CR1_SOD_Enum;

/* ==================================================  SSP CR1 MS [2..2]  ==================================================== */
typedef enum {                                  /*!< SSP_CR1_MS                                                                */
  SSP_CR1_MS_MASTER                   = 0,      /*!< MASTER : Device configured as master                                      */
  SSP_CR1_MS_SLAVE                    = 1,      /*!< SLAVE : Device configured as slave                                        */
} SSP_CR1_MS_Enum;

/* ==================================================  SSP CR1 SSE [1..1]  =================================================== */
typedef enum {                                  /*!< SSP_CR1_SSE                                                               */
  SSP_CR1_SSE_DIS                     = 0,      /*!< DIS : SSP disable                                                         */
  SSP_CR1_SSE_EN                      = 1,      /*!< EN : SSP enable                                                           */
} SSP_CR1_SSE_Enum;

/* ==================================================  SSP CR1 LBM [0..0]  =================================================== */
typedef enum {                                  /*!< SSP_CR1_LBM                                                               */
  SSP_CR1_LBM_DIS                     = 0,      /*!< DIS : Normal serial port operation enabled                                */
  SSP_CR1_LBM_EN                      = 1,      /*!< EN : Output of transmit serial shifter is connected to input
                                                                    of receive serial shifter internally                       */
} SSP_CR1_LBM_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  SR  =========================================================== */
/* ==================================================  SSP SR BSY [4..4]  ==================================================== */
typedef enum {                                  /*!< SSP_SR_BSY                                                                */
  SSP_SR_BSY_CLR_FLAG                 = 0,      /*!< CLR_FLAG : SSP is idle                                                    */
  SSP_SR_BSY_SET_FLAG                 = 1,      /*!< SET_FLAG : SSP is currently transmitting and/or receiving a
                                                     frame or the transmit FIFO is not empty                                   */
} SSP_SR_BSY_Enum;

/* ==================================================  SSP SR RFF [3..3]  ==================================================== */
typedef enum {                                  /*!< SSP_SR_RFF                                                                */
  SSP_SR_RFF_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Receive FIFO is not full                                       */
  SSP_SR_RFF_SET_FLAG                 = 1,      /*!< SET_FLAG : Receive FIFO is full                                           */
} SSP_SR_RFF_Enum;

/* ==================================================  SSP SR RNE [2..2]  ==================================================== */
typedef enum {                                  /*!< SSP_SR_RNE                                                                */
  SSP_SR_RNE_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Receive FIFO is empty                                          */
  SSP_SR_RNE_SET_FLAG                 = 1,      /*!< SET_FLAG : Receive FIFO is not empty                                      */
} SSP_SR_RNE_Enum;

/* ==================================================  SSP SR TNF [1..1]  ==================================================== */
typedef enum {                                  /*!< SSP_SR_TNF                                                                */
  SSP_SR_TNF_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Transmit FIFO is full                                          */
  SSP_SR_TNF_SET_FLAG                 = 1,      /*!< SET_FLAG : Transmit FIFO is not full                                      */
} SSP_SR_TNF_Enum;

/* ==================================================  SSP SR TFE [0..0]  ==================================================== */
typedef enum {                                  /*!< SSP_SR_TFE                                                                */
  SSP_SR_TFE_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Transmit FIFO is not empty                                     */
  SSP_SR_TFE_SET_FLAG                 = 1,      /*!< SET_FLAG : Transmit FIFO is empty                                         */
} SSP_SR_TFE_Enum;

/* =========================================================  CPSR  ========================================================== */
/* =========================================================  IMSC  ========================================================== */
/* ==================================================  SSP IMSC TX [3..3]  =================================================== */
typedef enum {                                  /*!< SSP_IMSC_TX                                                               */
  SSP_IMSC_TX_CLR_FLAG                = 0,      /*!< CLR_FLAG : Transmit FIFO half empty or less condition interrupt
                                                     is masked                                                                 */
  SSP_IMSC_TX_SET_FLAG                = 1,      /*!< SET_FLAG : Transmit FIFO half empty or less condition interrupt
                                                     is not masked                                                             */
} SSP_IMSC_TX_Enum;

/* ==================================================  SSP IMSC RX [2..2]  =================================================== */
typedef enum {                                  /*!< SSP_IMSC_RX                                                               */
  SSP_IMSC_RX_CLR_FLAG                = 0,      /*!< CLR_FLAG : Receive FIFO half full or less condition interrupt
                                                     is masked                                                                 */
  SSP_IMSC_RX_SET_FLAG                = 1,      /*!< SET_FLAG : Receive FIFO half full or less condition interrupt
                                                     is not masked                                                             */
} SSP_IMSC_RX_Enum;

/* ==================================================  SSP IMSC RT [1..1]  =================================================== */
typedef enum {                                  /*!< SSP_IMSC_RT                                                               */
  SSP_IMSC_RT_CLR_FLAG                = 0,      /*!< CLR_FLAG : Receive FIFO not empty and no read prior to timeout
                                                     period interrupt is masked                                                */
  SSP_IMSC_RT_SET_FLAG                = 1,      /*!< SET_FLAG : Receive FIFO not empty and no read prior to timeout
                                                     period interrupt is not masked                                            */
} SSP_IMSC_RT_Enum;

/* =================================================  SSP IMSC ROR [0..0]  =================================================== */
typedef enum {                                  /*!< SSP_IMSC_ROR                                                              */
  SSP_IMSC_ROR_CLR_FLAG               = 0,      /*!< CLR_FLAG : Receive FIFO written to while full condition interrupt
                                                     is masked                                                                 */
  SSP_IMSC_ROR_SET_FLAG               = 1,      /*!< SET_FLAG : Receive FIFO written to while full condition interrupt
                                                     is not masked                                                             */
} SSP_IMSC_ROR_Enum;

/* ==========================================================  RIS  ========================================================== */
/* ==================================================  SSP RIS TX [3..3]  ==================================================== */
typedef enum {                                  /*!< SSP_RIS_TX                                                                */
  SSP_RIS_TX_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Transmit FIFO half empty
                                                     or less                                                                   */
  SSP_RIS_TX_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Transmit FIFO half empty or
                                                     less                                                                      */
} SSP_RIS_TX_Enum;

/* ==================================================  SSP RIS RX [2..2]  ==================================================== */
typedef enum {                                  /*!< SSP_RIS_RX                                                                */
  SSP_RIS_RX_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO half full or
                                                     less                                                                      */
  SSP_RIS_RX_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO half full or less            */
} SSP_RIS_RX_Enum;

/* ==================================================  SSP RIS RT [1..1]  ==================================================== */
typedef enum {                                  /*!< SSP_RIS_RT                                                                */
  SSP_RIS_RT_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO not empty and
                                                     no read prior to timeout period                                           */
  SSP_RIS_RT_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO not empty and no
                                                     read prior to timeout period                                              */
} SSP_RIS_RT_Enum;

/* ==================================================  SSP RIS ROR [0..0]  =================================================== */
typedef enum {                                  /*!< SSP_RIS_ROR                                                               */
  SSP_RIS_ROR_CLR_FLAG                = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO written to
                                                     while full condition                                                      */
  SSP_RIS_ROR_SET_FLAG                = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO written to while
                                                     full condition                                                            */
} SSP_RIS_ROR_Enum;

/* ==========================================================  MIS  ========================================================== */
/* ==================================================  SSP MIS TX [3..3]  ==================================================== */
typedef enum {                                  /*!< SSP_MIS_TX                                                                */
  SSP_MIS_TX_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Transmit FIFO half empty
                                                     or less                                                                   */
  SSP_MIS_TX_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Transmit FIFO half empty or
                                                     less                                                                      */
} SSP_MIS_TX_Enum;

/* ==================================================  SSP MIS RX [2..2]  ==================================================== */
typedef enum {                                  /*!< SSP_MIS_RX                                                                */
  SSP_MIS_RX_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO half full or
                                                     less                                                                      */
  SSP_MIS_RX_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO half full or less            */
} SSP_MIS_RX_Enum;

/* ==================================================  SSP MIS RT [1..1]  ==================================================== */
typedef enum {                                  /*!< SSP_MIS_RT                                                                */
  SSP_MIS_RT_CLR_FLAG                 = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO not empty and
                                                     no read prior to timeout period                                           */
  SSP_MIS_RT_SET_FLAG                 = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO not empty and no
                                                     read prior to timeout period                                              */
} SSP_MIS_RT_Enum;

/* ==================================================  SSP MIS ROR [0..0]  =================================================== */
typedef enum {                                  /*!< SSP_MIS_ROR                                                               */
  SSP_MIS_ROR_CLR_FLAG                = 0,      /*!< CLR_FLAG : Interrupt not triggered: Receive FIFO written to
                                                     while full condition                                                      */
  SSP_MIS_ROR_SET_FLAG                = 1,      /*!< SET_FLAG : Interrupt triggered: Receive FIFO written to while
                                                     full condition                                                            */
} SSP_MIS_ROR_Enum;

/* ==========================================================  ICR  ========================================================== */
/* ==================================================  SSP ICR RT [1..1]  ==================================================== */
typedef enum {                                  /*!< SSP_ICR_RT                                                                */
  SSP_ICR_RT_CLR_FLAG                 = 0,      /*!< CLR_FLAG : No effect                                                      */
  SSP_ICR_RT_SET_FLAG                 = 1,      /*!< SET_FLAG : Clear interrupt: Receive FIFO not empty and no read
                                                     prior to timeout period                                                   */
} SSP_ICR_RT_Enum;

/* ==================================================  SSP ICR ROR [0..0]  =================================================== */
typedef enum {                                  /*!< SSP_ICR_ROR                                                               */
  SSP_ICR_ROR_CLR_FLAG                = 0,      /*!< CLR_FLAG : No effect                                                      */
  SSP_ICR_ROR_SET_FLAG                = 1,      /*!< SET_FLAG : Clear interrupt: Receive FIFO written to while full
                                                     condition                                                                 */
} SSP_ICR_ROR_Enum;

/* ========================================================  DMA_CR  ========================================================= */
/* ===============================================  SSP DMA_CR TXDMAE [1..1]  ================================================ */
typedef enum {                                  /*!< SSP_DMA_CR_TXDMAE                                                         */
  SSP_DMA_CR_TXDMAE_DIS               = 0,      /*!< DIS : Transmit DMA disable                                                */
  SSP_DMA_CR_TXDMAE_EN                = 1,      /*!< EN : Transmit DMA enable                                                  */
} SSP_DMA_CR_TXDMAE_Enum;

/* ===============================================  SSP DMA_CR RXDMAE [0..0]  ================================================ */
typedef enum {                                  /*!< SSP_DMA_CR_RXDMAE                                                         */
  SSP_DMA_CR_RXDMAE_DIS               = 0,      /*!< DIS : Receive DMA disable                                                 */
  SSP_DMA_CR_RXDMAE_EN                = 1,      /*!< EN : Receive DMA enable                                                   */
} SSP_DMA_CR_RXDMAE_Enum;


/* =========================================================================================================================== */
/* ================                                            WDG                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  LOAD  ========================================================== */
/* =========================================================  VALUE  ========================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* ================================================  WDG CONTROL RES [1..1]  ================================================= */
typedef enum {                                  /*!< WDG_CONTROL_RES                                                           */
  WDG_CONTROL_RES_DIS                  = 0,     /*!< DIS : Reset disable                                                       */
  WDG_CONTROL_RES_EN                   = 1,     /*!< EN : Reset enable                                                         */
} WDG_CONTROL_RES_Enum;

/* ================================================  WDG CONTROL INT [0..0]  ================================================= */
typedef enum {                                  /*!< WDG_CONTROL_INT                                                           */
  WDG_CONTROL_INT_DIS                  = 0,     /*!< DIS : Counter and interrupt disable                                       */
  WDG_CONTROL_INT_EN                   = 1,     /*!< EN : Counter and interrupt enable                                         */
} WDG_CONTROL_INT_Enum;

/* ========================================================  INTCLR  ========================================================= */
/* ==========================================================  RIS  ========================================================== */
/* ==================================================  WDG RIS WDOG [0..0]  ================================================== */
typedef enum {                                  /*!< WDG_RIS_WDOG                                                              */
  WDG_RIS_WDOG_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered: Watchdog counter did not
                                                     reach zero                                                                */
  WDG_RIS_WDOG_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered: Watchdog counter reached zero             */
} WDG_RIS_WDOG_Enum;

/* ==========================================================  MIS  ========================================================== */
/* ==================================================  WDG MIS WDOG [0..0]  ================================================== */
typedef enum {                                  /*!< WDG_MIS_WDOG                                                              */
  WDG_MIS_WDOG_CLR_FLAG                = 0,     /*!< CLR_FLAG : Interrupt not triggered: Watchdog counter did not
                                                     reach zero                                                                */
  WDG_MIS_WDOG_SET_FLAG                = 1,     /*!< SET_FLAG : Interrupt triggered: Watchdog counter reached zero             */
} WDG_MIS_WDOG_Enum;

/* =========================================================  LOCK  ========================================================== */



/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* ASR6601_H */


/** @} */ /* End of group ASR6601 */

/** @} */ /* End of group ASR Microelectronics */
